# Generated by Django 3.1.5 on 2021-01-17 13:33

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('status', models.IntegerField(choices=[('offline', 0), ('online', 1)], default=0)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ComputationalServer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remote_user', models.CharField(blank=True, max_length=128, null=True)),
                ('remote_host', models.CharField(default='local', max_length=128)),
                ('env_path', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='Flow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('computational_servers', models.ManyToManyField(to='ml_flow_vcs.ComputationalServer')),
            ],
        ),
        migrations.CreateModel(
            name='FlowVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(max_length=32)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('path', models.CharField(max_length=256)),
                ('children', models.ManyToManyField(related_name='flowversion_children', to='ml_flow_vcs.FlowVersion')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_by', to=settings.AUTH_USER_MODEL)),
                ('flow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ml_flow_vcs.flow')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flowversion_parent', to='ml_flow_vcs.flowversion')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flows', models.ManyToManyField(related_name='team_flow', to='ml_flow_vcs.Flow')),
                ('leader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leader', to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('to_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('approved', models.BooleanField(default=False)),
                ('computational_server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ml_flow_vcs.computationalserver')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ml_flow_vcs.team')),
                ('version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ml_flow_vcs.flowversion')),
            ],
        ),
        migrations.AddField(
            model_name='flow',
            name='root',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='root', to='ml_flow_vcs.flowversion'),
        ),
        migrations.AddField(
            model_name='flow',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ml_flow_vcs.team'),
        ),
        migrations.AddField(
            model_name='user',
            name='created_flow_versions',
            field=models.ManyToManyField(to='ml_flow_vcs.FlowVersion'),
        ),
        migrations.AddField(
            model_name='user',
            name='created_teams',
            field=models.ManyToManyField(related_name='created_teams', to='ml_flow_vcs.Team'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='received_requests',
            field=models.ManyToManyField(related_name='received_requests', to='ml_flow_vcs.Request'),
        ),
        migrations.AddField(
            model_name='user',
            name='sent_requests',
            field=models.ManyToManyField(related_name='sent_requests', to='ml_flow_vcs.Request'),
        ),
        migrations.AddField(
            model_name='user',
            name='teams',
            field=models.ManyToManyField(related_name='teams', to='ml_flow_vcs.Team'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
