[{"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\index.js":"1","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\reportWebVitals.js":"2","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\App.js":"3","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home.js":"4","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\About.js":"5","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\SignUp.js":"6","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\LogIn.js":"7","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Start.js":"8","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Header.jsx":"9","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserProfil.jsx":"10","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\TeamCreate.jsx":"11","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Main.jsx":"12","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Layout.jsx":"13","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Team.jsx":"14","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow.jsx":"15","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DatasetLoader.jsx":"16","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelLoader.jsx":"17","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataNormalizer.jsx":"18","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataPlotter.jsx":"19","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelEvaluator.jsx":"20","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataStandardizer.jsx":"21","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelPredictor.jsx":"22","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\FlowCreate.jsx":"23","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\FlowVersionCreate.jsx":"24"},{"size":500,"mtime":499162500000,"results":"25","hashOfConfig":"26"},{"size":362,"mtime":499162500000,"results":"27","hashOfConfig":"26"},{"size":1408,"mtime":1612623282025,"results":"28","hashOfConfig":"26"},{"size":1091,"mtime":1611066704327,"results":"29","hashOfConfig":"26"},{"size":306,"mtime":1611015858264,"results":"30","hashOfConfig":"26"},{"size":2164,"mtime":1611092956308,"results":"31","hashOfConfig":"26"},{"size":2572,"mtime":1611681473860,"results":"32","hashOfConfig":"26"},{"size":2454,"mtime":1612618531699,"results":"33","hashOfConfig":"26"},{"size":2210,"mtime":1611681509017,"results":"34","hashOfConfig":"26"},{"size":1637,"mtime":1611690915231,"results":"35","hashOfConfig":"26"},{"size":1471,"mtime":1611690970292,"results":"36","hashOfConfig":"26"},{"size":435,"mtime":1611604589507,"results":"37","hashOfConfig":"26"},{"size":355,"mtime":1611604273976,"results":"38","hashOfConfig":"26"},{"size":5542,"mtime":1613148181557,"results":"39","hashOfConfig":"26"},{"size":6253,"mtime":1616543690539,"results":"40","hashOfConfig":"26"},{"size":7680,"mtime":1616527858308,"results":"41","hashOfConfig":"26"},{"size":12291,"mtime":1616545547982,"results":"42","hashOfConfig":"26"},{"size":7745,"mtime":1616527814519,"results":"43","hashOfConfig":"26"},{"size":6886,"mtime":1616539955133,"results":"44","hashOfConfig":"26"},{"size":7598,"mtime":1616541000392,"results":"45","hashOfConfig":"26"},{"size":7604,"mtime":1616540368063,"results":"46","hashOfConfig":"26"},{"size":6894,"mtime":1616541886432,"results":"47","hashOfConfig":"26"},{"size":2574,"mtime":1613157559450,"results":"48","hashOfConfig":"26"},{"size":4125,"mtime":1616432600488,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"wp5s2w",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"52"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"52"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"52"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"52"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"52"},"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\index.js",[],["120","121"],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\reportWebVitals.js",[],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\App.js",["122"],"//import './App.css';\nimport Home from \"./Home.js\";\nimport Main from \"./Main.jsx\";\nimport About from \"./About.js\";\nimport React from 'react';\nimport Start from './Start';\nimport UserProfil from './UserProfil';\nimport TeamCreate from './TeamCreate';\nimport Team from './Team';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport MainLayout from \"./Layout.jsx\";\nimport Flow from './Flow';\n\nexport default function App() {\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path='/' exact={true} component={Home} />\n          <Route path=\"/about\" component={About}/>\n          \n          <Main>\n              <Route path=\"/main\">\n                <Start>\n                { user =>(\n                <React.Fragment> \n                  <Route exact={true} path=\"/main\">\n                    <UserProfil user={user}/>\n                  </Route>\n                  <Route path=\"/main/teamCreate\">\n                    <TeamCreate user={user}/>\n                  </Route>\n                  <Route path=\"/main/team/:teamid/:leader\" forceRefresh={true}>\n                    <Team/>\n                  </Route>\n                </React.Fragment>\n                )}\n                </Start>\n              </Route>\n              <Route path=\"/flow/:flowname/:rootid\" component={Flow}/>      \n          </Main>\n        </Switch>\n      </Router>\n    </div>\n  );\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Home.js",["123"],"import { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Home.css';\r\nimport LogIn from './LogIn';\r\nimport SingUp from './SignUp';\r\n//import './App.css';\r\n\r\nexport default function Home() \r\n{\r\n\r\n  const [isLog, setIsLog] = useState(true); \r\n\r\n  const handlerRegister = () =>\r\n  {\r\n    setIsLog(false);\r\n  }\r\n\r\n  const handlerLogIn = () =>\r\n  {\r\n    setIsLog(true)\r\n  }\r\n  \r\n    return (\r\n      <div className=\"content\">\r\n        <div className=\"title\">\r\n          <h1>Welcome to EasyFlow</h1>\r\n          <p className=\"about\">\r\n            We are framework designed for...\r\n            <Link className=\"linkToAbout\" to = \"/about\"> About</Link>\r\n            <br/>\r\n            i tako dalje\r\n          </p>\r\n        </div>\r\n        <div className=\"signDiv\">\r\n          <Link onClick={handlerRegister}> Register </Link>\r\n          /\r\n          <Link onClick={handlerLogIn}> LogIn </Link>\r\n          <br/>\r\n          {isLog == true ?\r\n            <LogIn></LogIn>\r\n            :<SingUp></SingUp>\r\n          }\r\n          <br/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\About.js",[],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\SignUp.js",["124"],"import React, { useEffect,useState } from 'react'\r\n\r\nexport default function SingUp() {\r\n\r\n    const [firstname, setFirstname] = useState(\"\");\r\n    const [lastname, setLastname] = useState(\"\");\r\n    const [username, setUsername] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const updateFirstname = e => {\r\n        setFirstname(e.target.value);\r\n    }\r\n    const updateLastname = e => {\r\n        setLastname(e.target.value);\r\n    }\r\n    const updateUsername = e => {\r\n        setUsername(e.target.value);\r\n    }\r\n    const updateEmail = e => {\r\n        setEmail(e.target.value);\r\n    }\r\n    const updatePassword = e => {\r\n        setPassword(e.target.value);\r\n    }\r\n\r\n    const createUser = async(e) =>{\r\n        e.preventDefault();\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\"username\":username,\"email\":email,\"password\":password,\"first_name\":firstname,\"last_name\":lastname})};\r\n            \r\n        const response = await fetch('http://localhost:8000/easy_flow/v1/user_create/',requestOptions);\r\n        console.log(response);\r\n    }\r\n\r\n    return (\r\n        <div className=\"divSignup\">\r\n            <form onSubmit={createUser}>\r\n                Username: <input className=\"inputSignup\" type=\"text\" value={username} onChange={updateUsername} />\r\n                <br /><br />\r\n                E-mail: <input className=\"inputSignup\" type=\"text\" value={email} onChange={updateEmail} />\r\n                <br /><br />\r\n                Fistname: <input className=\"inputSignup\" type=\"text\" value={firstname} onChange={updateFirstname} />\r\n                <br /><br />\r\n                Lastname: <input className=\"inputSignup\" type=\"text\" value={lastname} onChange={updateLastname} />\r\n                <br /><br />\r\n                Password: <input className=\"inputSignup\" type=\"text\" value={password} onChange={updatePassword} />\r\n                <br /><br />\r\n                <button type=\"submit\" id=\"buttonSingup\">SignUp</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\LogIn.js",["125","126"],"import React, { useState } from 'react'\r\nimport { useCookies } from 'react-cookie';\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nexport default function LogIn() {\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [isError, setIsError] = useState(false);\r\n    const [cookies, setCookies, removeCookies] = useCookies(['user']);\r\n    const history = useHistory();\r\n\r\n    const updateUsername = e => {\r\n        setUsername(e.target.value);\r\n    }\r\n    const updatePassword = e => {\r\n        setPassword(e.target.value);\r\n    }\r\n\r\n\r\n    async function LogIn(){\r\n\r\n        //console.log(JSON.stringify({\"username\":username,\"password\":password}));\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\"username\":username,\"password\":password})\r\n        };\r\n\r\n        setIsError(false);\r\n\r\n        const response = await fetch('http://localhost:8000/easy_flow/v1/login/',requestOptions);\r\n        const data = await response.json();\r\n\r\n        if(response.ok)\r\n        {\r\n            /*\r\n            const requestOptionsCookie = {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': 'Token ' + data.token,\r\n                    'Content-Type': 'application/json' \r\n                }\r\n            };\r\n            const responseCookie = await fetch('http://localhost:8000/easy_flow/v1/get_cookie/'+data.user.id+\"/\",requestOptionsCookie);\r\n            const dataCookie = await responseCookie.json();\r\n            console.log(responseCookie);\r\n            console.log(dataCookie);*/\r\n\r\n            setCookies(\"token\",data.token);\r\n            setCookies(\"id\",data.user.id);\r\n            console.log(\"OK\");\r\n            console.log(data);  \r\n            history.push(\"/main\");\r\n        }\r\n        else{\r\n            //removeCookie(\"token\");\r\n            setIsError(true);\r\n            console.log(\"ERROR\");\r\n        }\r\n        \r\n    }\r\n\r\n    return(\r\n        <div className=\"divSignup\">\r\n            { isError && <div> Incorect username or password </div> }\r\n            <br/>\r\n            Username: <input className=\"inputSignup\" type=\"text\" value={username} onChange={updateUsername}/>\r\n            <br/><br/>\r\n            Password: <input className=\"inputSignup\" type=\"text\" value={password} onChange={updatePassword}/>\r\n            <br/><br/>\r\n            <button id=\"buttonSingup\" onClick={LogIn}>LogIn</button>\r\n            <br/><br/>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Start.js",["127","128","129","130","131","132","133"],"import React, { useEffect,useState } from 'react'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport './Start.css'\r\nimport TeamCreate from './TeamCreate';\r\nimport UserProfil from './UserProfil';\r\nimport Header from './Header';\r\nimport { useCookies } from 'react-cookie';\r\n\r\nexport default function Start({children}){\r\n\r\n    const [cookies] = useCookies(['user']);\r\n    const [user,setUser] = useState([]);\r\n    const [teams,setTeams] = useState([]);\r\n    const [myTeams, setMyTeams] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getUser();\r\n    },[] );\r\n\r\n    const getUser = async () =>\r\n    {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            }\r\n            };\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/user/\" + cookies.id +\"/\", requestOptions);\r\n        const data = await response.json();\r\n\r\n        setUser(data);\r\n        setTeams(data.teams);\r\n        setMyTeams(data.created_teams);\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\" id=\"start\">\r\n            <aside id=\"teams\">\r\n                <nav>\r\n                    <ul>\r\n                        <p>\r\n                            <Link to=\"/main/teamCreate\">\r\n                                Create new team\r\n                            </Link>\r\n                        </p>\r\n                        Your teams\r\n                        {myTeams?.map(team => (\r\n                            <li>\r\n                                <Link to={`/main/team/${team.id}/${1}`}>\r\n                                    {team.name}\r\n                                </Link>\r\n                            </li>\r\n                        ))}\r\n                        You are member\r\n                        {teams?.map(team => (\r\n                            <li>\r\n                                <Link to={`/main/team/${team.id}/${0}`}>\r\n                                    {team.leader.username}/{team.name}\r\n                                </Link>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </nav>\r\n            </aside>\r\n            <main>\r\n                {children(user)}\r\n            </main>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Header.jsx",["134","135"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useCookies } from 'react-cookie';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport \"./Header.css\";\r\n\r\nexport default function Header()\r\n{\r\n    const [cookies, setCookies, removeCookies] = useCookies(['user']);\r\n    const history = useHistory();\r\n\r\n    const logout = async () => {\r\n        console.log(`Token ${cookies.token}`);\r\n        /*\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            header: new Headers({\r\n                   'Authorization': `Token ${cookies.token}`\r\n                })\r\n            };\r\n            \r\n\r\n        const requestOptions = {\r\n        method: 'PUT',\r\n        header:{\r\n                'Authorization': `Token ${cookies.token}`\r\n           },\r\n        body: JSON.stringify({'id':cookie.id})  \r\n        };*/\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            headers:{\r\n                    'Authorization': `Token ${cookies.token}`,\r\n                    'Content-Type': 'application/json',\r\n                    'accept': 'application/json'\r\n                },\r\n            body: JSON.stringify({\"created_by\":cookies.id})  \r\n        };\r\n        console.log(requestOptions);\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/logout/\",requestOptions);\r\n        console.log(response);\r\n\r\n        console.log(\"Logout\");\r\n        removeCookies(\"token\");\r\n        removeCookies(\"id\");\r\n        history.push(\"/\");\r\n    }\r\n\r\n    return(\r\n        <header>\r\n            <nav>\r\n                <ul>\r\n                    <li>\r\n                        <Link to=\"/main\">\r\n                            Profile\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link to=\"/main/teamCreate\">\r\n                            Create new team\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                            Teams\r\n                    </li>\r\n\r\n                    <li id=\"logout\">\r\n                        <a onClick={logout}>Logout</a>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\UserProfil.jsx",["136","137","138","139","140","141","142"],"import React, { useEffect,useReducer,useState } from 'react'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport { useCookies } from 'react-cookie';\r\nimport './Start.css'\r\n\r\nexport default function UserProfil({user}){\r\n    \r\n    const [cookies] = useCookies(['user']);\r\n\r\n    useEffect(() => {\r\n        //getUser();\r\n    },[] );\r\n\r\n\r\n    return (\r\n        <div className=\"contentBody\" id=\"Info\">\r\n            <table className=\"InfoTable\">\r\n                <h2>Profile info</h2>\r\n                    <tr>\r\n                        <th>\r\n                            Username:\r\n                        </th>\r\n                        <td>\r\n                            {user?.username}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>\r\n                            Email:\r\n                        </th>\r\n                        <td>\r\n                            {user?.email}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>\r\n                            Firstname:\r\n                        </th>\r\n                        <td>\r\n                            {user?.first_name}\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>\r\n                            Lastname:\r\n                        </th>\r\n                        <td>\r\n                            {user?.last_name}\r\n                        </td>\r\n                    </tr>\r\n            </table>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\TeamCreate.jsx",["143"],"import React, { useEffect,useState } from 'react';\r\nimport { useCookies } from 'react-cookie';\r\n\r\nexport default function TeamCreate({user}){\r\n\r\n    const [teamname, setTeamname] = useState(\"\");\r\n    const [cookies] = useCookies(['user']);\r\n\r\n    const updateTeamname = e => {\r\n        setTeamname(e.target.value);\r\n    }\r\n\r\n    const createTeam = async(e) => {\r\n        e.preventDefault();\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\"created_by\":cookies.id,\"name\":teamname})\r\n        };\r\n\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/team_create/\",requestOptions);\r\n        const data = await response.json();\r\n        console.log(data);\r\n\r\n        if(response.ok)\r\n        {\r\n            console.log(\"OK\");\r\n            console.log(data);\r\n        }\r\n        else\r\n        {\r\n            console.log(\"ERROR\");\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"contentBody\">\r\n            \r\n        <form onSubmit={createTeam}>\r\n            Team name: <input className=\"inputSignup\" type=\"text\" value={teamname} onChange={updateTeamname} />\r\n            <br /><br />\r\n            <button type=\"submit\" id=\"buttonSingup\">Create team</button>\r\n        </form>\r\n    </div>\r\n    )\r\n}\r\n","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Main.jsx",["144","145","146","147","148","149"],"import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Header from \"./Header.jsx\";\r\nimport UserProfil from './UserProfil';\r\nimport Start from './Start';\r\nimport About from \"./About\";\r\n\r\n\r\nexport default function Main({children})\r\n{\r\n    return(\r\n        <div>\r\n            <Header />\r\n            <main>\r\n                {children}\r\n            </main>\r\n        </div>\r\n    );\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Layout.jsx",[],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Team.jsx",["150","151","152","153"],"import React, { isValidElement, useEffect,useState } from 'react'\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useCookies } from 'react-cookie';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Team(){\r\n\r\n    const {teamid} = useParams();\r\n    const {leader} = useParams();\r\n    const [team,setTeam] = useState([]);\r\n    const [flows,setFlows] = useState([]);\r\n    const [flowname, setFlowname] = useState(\"\");\r\n    const [cookies] = useCookies(['user']);\r\n\r\n    const updateFlowname = e => {\r\n        setFlowname(e.target.value);\r\n    }\r\n\r\n    const getTeam = async () =>\r\n    {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            }\r\n            };\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/team/\" + teamid +\"/\", requestOptions);\r\n        const data = await response.json();\r\n        setTeam(data);\r\n        setFlows(data.flows);\r\n    }\r\n    \r\n    useEffect(() => {\r\n        getTeam();\r\n    },[teamid] );\r\n\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n\r\n    const updateUsername = e => {\r\n        setUsername(e.target.value);\r\n    }\r\n\r\n\r\n    const addMember = async(e) => {\r\n        e.preventDefault();\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\"created_by\":cookies.id,\"user\":username,\"team\":teamid})\r\n        };\r\n\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/add_member/\",requestOptions);\r\n        const data = await response.json();\r\n\r\n        if(response.ok)\r\n        {\r\n            console.log(\"OK\");\r\n        }\r\n        else\r\n        {\r\n            console.log(\"ERROR\");\r\n        }\r\n    }\r\n\r\n    const addFlow = async(e) => {\r\n        // const requestOptions = {\r\n        //     method: 'POST',\r\n        //     headers:{\r\n        //         'Authorization': 'Token ' + cookies.token,\r\n        //         'Content-Type': 'application/json',\r\n        //         'accept': 'application/json'\r\n        //     },\r\n        //     body: JSON.stringify({\"created_by\":cookies.id,\"user\":username,\"team\":teamid})\r\n        // };\r\n\r\n        alert(\"Flow added \"+flowname);\r\n    }\r\n\r\n    const removeFlow = async(flowid) => {\r\n        const requestOptions = {\r\n            method: 'DELETE',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            },\r\n            body: JSON.stringify({\"flow\":cookies.id})\r\n        };\r\n\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow_remove/\",requestOptions);\r\n        \r\n        console.log(response);    \r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"contentBody\" id=\"Info\">\r\n            <div>\r\n                <h2>Team info</h2>\r\n                <p>Name: {team?.name}</p>\r\n                <h2>Members</h2>\r\n                <ul>\r\n                {team?.members?.map(member => (\r\n                    <li>{member.username}</li>\r\n                  ))}\r\n                </ul>\r\n                <br/>\r\n                {leader == true &&\r\n                <div>\r\n                <p>Add member:</p>\r\n                <form onSubmit={addMember}>\r\n                    User email: \r\n                    <input className=\"inputSignup\" type=\"text\" value={username} onChange={updateUsername} />\r\n                    <br /><br />\r\n                    <button type=\"submit\" id=\"buttonSingup\">Add member</button>\r\n                </form>\r\n                </div>}\r\n            </div>\r\n            \r\n            <div className=\"flows\">\r\n                <h2>Flows created by this team:</h2>\r\n                <table className=\"flowsTable\">\r\n                    <thead>\r\n                        <th>Flow name</th>\r\n                        <th>Created:</th>\r\n                    </thead>\r\n                    <tbody>\r\n                        {flows?.map(flow=>(\r\n                            <tr>\r\n                                <td>\r\n                                    <Link to={`/flow/${flow.name}/${flow.root.id}`}>\r\n                                        {flow.name}\r\n                                    </Link>\r\n                                </td>\r\n                                <td>\r\n                                    {flow.timestamp.slice(0,10)+\"   \"+flow.timestamp.slice(11,19)}\r\n                                </td>\r\n                                <td>\r\n                                    <button id=\"delete\" onClick={() => removeFlow(flow.id)}>\r\n                                        Remove\r\n                                    </button>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n                <p>Add new flow:</p>\r\n                <form onSubmit={addFlow}>\r\n                    Flow name: <input className=\"inputSignup\" type=\"text\" value={flowname} onChange={updateFlowname} />\r\n                    <br /><br />    \r\n                    <button type=\"submit\" id=\"buttonSingup\">Add flow</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Flow.jsx",["154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170"],"import React, { useEffect,useState } from 'react';\r\nimport './Flow.css';\r\nimport { useCookies } from 'react-cookie';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport { useParams } from 'react-router-dom';\r\nimport DatasetLoader from './Nodes/DatasetLoader';\r\nimport ModelLoader from './Nodes/ModelLoader';\r\nimport DataNormalizer from './Nodes/DataNormalizer';\r\nimport DataPlotter from './Nodes/DataPlotter';\r\nimport ModelEvaluator from './Nodes/ModelEvaluator';\r\nimport DataStandardizer from './Nodes/DataStandardizer';\r\nimport ModelPredictor from './Nodes/ModelPredictor';\r\nimport FlowCreate from './FlowCreate';\r\nimport FlowVersionCreate from './FlowVersionCreate';\r\n\r\nexport default function Flow(){\r\n\r\n    const {rootid} = useParams();\r\n    const {flowname} = useParams();\r\n    const [flowJson,setFlowJson] = useState([]);\r\n    const [flowTree, setFlowTree] = useState([]);\r\n    const [creation, setCreation] = useState(0);\r\n    const [cookies] = useCookies(['user']);\r\n    const [proba,setProba] = useState(\"proba\");\r\n    const [current,setCurrent] = useState(\"\");\r\n    const [update,setUpdate] = useState(false);\r\n    const [nodes,setNodes] = useState(0);\r\n\r\n    const [flow,setFlow] = useState(\r\n    {\r\n        \"created_by\": cookies.id,\r\n        \"flow_version\" : current,\r\n        \"serialized_flow\": flowJson\r\n    })\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        getFlowTree();\r\n    },[] );\r\n\r\n    useEffect(() => {\r\n        updateFlowVersion();\r\n    },[nodes]);\r\n\r\n    const getFlowTree = async () =>\r\n    {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            }\r\n            };\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow_version/\" + rootid + \"/\", requestOptions);\r\n        const data = await response.json();\r\n        //console.log(data);\r\n        setFlowTree(data);\r\n        setCurrent(rootid);\r\n    }\r\n\r\n    const getFlowJson = async(versionid) =>\r\n    {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers:{\r\n                'Authorization': 'Token ' + cookies.token,\r\n                'Content-Type': 'application/json',\r\n                'accept': 'application/json'\r\n            }\r\n            };\r\n        const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow_version_json/\" + versionid + \"/\", requestOptions);\r\n        const data = await response.json();\r\n        console.log(data);\r\n\r\n        setFlowJson(data);\r\n        setCurrent(versionid);\r\n        setCreation(0);\r\n    }\r\n\r\n    const updateFlowVersion = async() =>\r\n    {\r\n        if(nodes)\r\n        {\r\n            //console.log(\"UPDATE\");\r\n            //console.log(flowJson);\r\n\r\n            setNodes(0);\r\n\r\n            var flow = {\r\n                \"created_by\": cookies.id,\r\n                \"flow_version\" : current,\r\n                \"serialized_flow\": flowJson\r\n            }\r\n            \r\n            console.log(flow);\r\n\r\n            const requestOptions = {\r\n                method: 'PUT',\r\n                headers:{\r\n                    'Authorization': 'Token ' + cookies.token,\r\n                    'Content-Type': 'application/json',\r\n                    'accept': 'application/json'\r\n                },\r\n                body: JSON.stringify(flow)\r\n            };\r\n    \r\n            const response = await fetch(\"http://localhost:8000/easy_flow/v1/flow_version_edit/\",requestOptions);\r\n            const data = await response.json();\r\n\r\n            console.log(data);\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const handleCreate = () =>\r\n    {\r\n        setFlowJson([]);\r\n        setCreation(1);\r\n    }\r\n\r\n\r\n    const renderTree = (nodes) => (\r\n        <TreeItem key={nodes.id} nodeId={nodes.id} label={flowname + nodes.version} onClick={() => getFlowJson(nodes.id)}>\r\n          {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTree(node)) : null}\r\n        </TreeItem>\r\n    );\r\n          \r\n    return(\r\n      <div className=\"content\" id=\"flow\">\r\n        <div >\r\n            <TreeView\r\n                defaultCollapseIcon={<ExpandMoreIcon />}\r\n                defaultExpanded={['root']}\r\n                defaultExpandIcon={<ChevronRightIcon />}\r\n            >\r\n                {renderTree(flowTree)}\r\n            </TreeView>\r\n\r\n            <p className=\"link\" onClick={() => handleCreate()}>+ Flow version</p>\r\n        </div>\r\n        <div>\r\n        \r\n            {flowJson?.nodes?.map((node, index) => (\r\n                <p>\r\n                    {node.type == \"data_normalizer\" &&\r\n                    <DataNormalizer nodes={flowJson.nodes} setNodes={setNodes} creationFlag={false} id={index}/>}\r\n\r\n                    {node.type == \"data_plotter\" &&\r\n                    <DataPlotter node={node} setNodes={setNodes} creationFlag={false} id={index}></DataPlotter>}\r\n                    \r\n                    {node.type == \"keras_dataset_loader\" && \r\n                    <DatasetLoader nodes={flowJson.nodes} setNodes={setNodes} creationFlag={false} id={index}/>}    \r\n\r\n                    {node.type == \"data_standardizer\" &&\r\n                    <DataStandardizer nodes={flowJson.nodes} setNodes={setNodes} creationFlag={false} id={index}/>}\r\n                    \r\n                    {node.type == \"model_evaluator\" &&\r\n                    <ModelEvaluator nodes={flowJson.nodes} setNodes={setNodes} creationFlag={false} id={index}/>}\r\n\r\n                    {node.type == \"model_loader\" &&  \r\n                    <ModelLoader  node={node} setNodes={setNodes} creationFlag={false} id={index}/>}\r\n                    \r\n                    {node.type == \"model_predictor\" &&\r\n                    <ModelPredictor node={node} setNodes={setNodes} creationFlag={false} id={index}/>}\r\n                </p>\r\n            ))}\r\n        </div>\r\n        {creation == 1 && \r\n            <FlowVersionCreate flowname={flowname} flowid={rootid} prev={current}></FlowVersionCreate>\r\n        }\r\n      </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DatasetLoader.jsx",["171","172","173","174","175","176","177","178","179"],"import React, { useEffect,useState } from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"../Flow.css\";\r\n\r\nexport default function DatasetLoader(props){\r\n\r\n\r\n    const [update,setUpdate] = useState(0);\r\n    const [details,setDetails] = useState(0);\r\n\r\n    const [items] = useState([\r\n        \"mnist\",\"cifra10\",\"cifra100\",\"imdb\",\"reuters\",\"fashion_mnist\",\"boston_housing\"\r\n    ])\r\n    const [dataset,setDataset] =  useState();\r\n    const [input,setInput] = useState([]);\r\n    const [output,setOutput] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setDataset(props.nodes[props.id]?.params[\"dataset\"]);\r\n        setInput(props.nodes[props.id].input_keys);\r\n        setOutput(props?.nodes[props.id]?.output_keys);\r\n        //console.log(props.nodes);\r\n        //if(props.nodes[props.id].input_keys.length == 0)\r\n            //console.log(\"ZNOPRA\");\r\n        //console.log(props?.nodes[props.id]?.input_keys);\r\n    },[props.nodes] );\r\n\r\n\r\n    const onChange = () =>\r\n    {\r\n        setUpdate(!update);\r\n        if(update)\r\n        {\r\n            //console.log(\"upisujem\");\r\n            var nodes = props.nodes;\r\n            var item =  dataset;\r\n            \r\n            nodes[props.id].params[\"dataset\"] = item;\r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].output_keys = output;\r\n\r\n            props.setNodes(1);\r\n            //props.update()\r\n        }\r\n    }\r\n\r\n    const addInput = () =>\r\n    {\r\n        setInput(input => [...input,\"null\"]);\r\n    }\r\n\r\n    const removeInput = (index) =>\r\n    {\r\n        var temp = [...input];\r\n        temp.splice(index,1);\r\n        setInput(temp);\r\n    }\r\n\r\n    const changeInput = (index,e) =>\r\n    {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n    }\r\n\r\n    const addOutput = () =>\r\n    {\r\n        setOutput(output => [...output,\"null\"]);\r\n    }\r\n\r\n    const removeOutput = (index) =>\r\n    {\r\n        var temp = [...output];\r\n        temp.splice(index,1);\r\n        setOutput(temp);\r\n    }\r\n\r\n    const changeOutput = (index,e) =>\r\n    {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"node\">\r\n            {details == 0 && <br/>}\r\n            <span onClick={() => setDetails(!details)}><b>DatasetLoader</b></span>\r\n            \r\n                {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update?\r\n                    <>\r\n                        <table className=\"NodeTable\">\r\n                            <tr>\r\n                                <th> \r\n                                    Input keys:\r\n                                    <button onClick={() => addInput()}>+</button>\r\n                                </th>\r\n                                \r\n                            </tr>\r\n                            {input.length == 0 ? \r\n                                <tr>\r\n                                    <td>\r\n                                        null\r\n                                    </td>\r\n                                </tr>\r\n                            :\r\n                            <>\r\n                            {input.map((item, index) => (\r\n                                <tr>\r\n                                    <td>\r\n                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index,e)}/>\r\n                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </>}\r\n                        </table>\r\n                        <table className=\"NodeTable\">\r\n                            <tr>\r\n                                <th>  \r\n                                    Output keys: \r\n                                    <button onClick={() => addOutput()}>+</button>\r\n                                </th>\r\n                            </tr>\r\n                            {output.length == 0 ? \r\n                                <tr>\r\n                                    <td>\r\n                                        null\r\n                                    </td>\r\n                                </tr>\r\n                            :\r\n                            <>\r\n                            {output.map((item, index) => (\r\n                                <tr>\r\n                                    <td>\r\n                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index,e)}/>\r\n                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </>}\r\n                        </table>\r\n                        <br/>\r\n                        DataSet:\r\n                        <select id=\"dataset\" value={dataset} onChange={e => setDataset(e.currentTarget.value)}>\r\n                            {items.map(item => (\r\n                                <option key={item} value={item}>{item}</option>\r\n                            ))}\r\n                        </select>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <table className=\"NodeTable\">\r\n                            <tr>\r\n                                <th> \r\n                                    Input keys:\r\n                                </th>\r\n                                \r\n                            </tr>\r\n                            {input.length == 0 ? \r\n                                <tr>\r\n                                    <td>\r\n                                        null\r\n                                    </td>\r\n                                </tr>\r\n                            :\r\n                            <>\r\n                            {input.map((item, index) => (\r\n                                <tr>\r\n                                    <td>\r\n                                        {item}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </>}\r\n                        </table>\r\n                        <table className=\"NodeTable\">\r\n                            <tr>\r\n                                <th>  \r\n                                    Output keys: \r\n                                </th>\r\n                            </tr>\r\n                            {output.length == 0 ? \r\n                                <tr>\r\n                                    <td>\r\n                                        null\r\n                                    </td>\r\n                                </tr>\r\n                            :\r\n                            <>\r\n                            {output.map((item, index) => (\r\n                                <tr>\r\n                                    <td>\r\n                                        {item}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </>}\r\n                        </table>\r\n                        <br/>\r\n                        DataSet: <span> {dataset}</span>\r\n                    </>\r\n                    }\r\n                    <br/><br/>\r\n                    <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                </div>  \r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelLoader.jsx",["180","181","182","183","184","185","186","187"],"import React, { useEffect,useState } from 'react';\r\nimport \"../Flow.css\";\r\n\r\nexport default function ModelLoader(props){\r\n\r\n    const [details,setDetails] = useState(0);\r\n    const [update,setUpdate] = useState(0);\r\n\r\n    const [path, setPath] = useState();\r\n    const [loss,setLoss] = useState();\r\n    const [metrics,setMetrics] = useState();\r\n    const [optimizer,setOprimizer] = useState();\r\n    const [compile,setCompile] = useState();\r\n    const [train,setTrain] = useState();\r\n    const [epochs,setEpochs] = useState();\r\n    const [batchSize,setBatchSize] = useState();\r\n    const [publish,setPublish] = useState();\r\n\r\n    const [input,setInput] = useState([]);\r\n    const [output,setOutput] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        setPath(props.node.params[\"model_path\"]);\r\n        setLoss(props.node.params[\"loss\"]);\r\n        setMetrics(props.node.params[\"metrics\"]);\r\n        setOprimizer(props.node.params[\"optimizer\"]);\r\n        setCompile(props.node.params[\"compile\"]?1:0);\r\n        setTrain(props.node.params[\"train\"]?1:0);\r\n        setEpochs(props.node.params[\"epochs\"]);\r\n        setBatchSize(props.node.params[\"batch_size\"]);\r\n        setPublish(props.node.params[\"publish\"]?1:0);\r\n\r\n        setInput(props.node.input_keys);\r\n        setOutput(props.node.output_keys);\r\n\r\n        //console.log(data);\r\n    },[props.node] );\r\n\r\n\r\n    const onChange = () =>\r\n    {\r\n        setUpdate(!update);\r\n        if(update)\r\n        {\r\n            //console.log(\"upisujem\")\r\n            \r\n            props.node.params[\"model_path\"] = path;\r\n            props.node.params[\"loss\"] = loss;\r\n            props.node.params[\"metrics\"] = metrics;\r\n            props.node.params[\"optimizer\"] = optimizer;\r\n            props.node.params[\"compile\"] = compile;\r\n            props.node.params[\"train\"] = train;\r\n            props.node.params[\"epochs\"] = epochs;\r\n            props.node.params[\"batch_size\"] = batchSize;\r\n            props.node.params[\"publish\"] = publish;\r\n\r\n            props.node.input_keys = input;\r\n            props.node.output_keys = output;\r\n\r\n            props.setNodes(1);\r\n            //props.update()\r\n        }\r\n    }\r\n\r\n    const addInput = () =>\r\n    {\r\n        setInput(input => [...input,\"null\"]);\r\n    }\r\n\r\n    const removeInput = (index) =>\r\n    {\r\n        var temp = [...input];\r\n        temp.splice(index,1);\r\n        setInput(temp);\r\n    }\r\n\r\n    const changeInput = (index,e) =>\r\n    {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n    }\r\n\r\n    const addOutput = () =>\r\n    {\r\n        setOutput(output => [...output,\"null\"]);\r\n    }\r\n\r\n    const removeOutput = (index) =>\r\n    {\r\n        var temp = [...output];\r\n        temp.splice(index,1);\r\n        setOutput(temp);\r\n    }\r\n\r\n    const changeOutput = (index,e) =>\r\n    {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n    }\r\n\r\n    return(\r\n        <div className=\"node\">\r\n            {details == 0 && <br/>}\r\n            <span onClick={() => setDetails(!details)}><b>ModelLoader</b></span>\r\n            {details == 1 &&\r\n            <div>\r\n                <hr></hr>\r\n                {update == 1  ?\r\n                <>\r\n                    <table className=\"NodeTable\">\r\n                        <tr>\r\n                            <th> \r\n                                Input keys:\r\n                                <button onClick={() => addInput()}>+</button>\r\n                            </th>\r\n                            \r\n                        </tr>\r\n                        {input.length == 0 ? \r\n                            <tr>\r\n                                <td>\r\n                                    null\r\n                                </td>\r\n                            </tr>\r\n                        :\r\n                        <>\r\n                        {input.map((item, index) => (\r\n                            <tr>\r\n                                <td>\r\n                                    <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index,e)}/>\r\n                                    <button onClick={() => removeInput(index)}>-</button>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                        </>}\r\n                    </table>\r\n                    <table className=\"NodeTable\">\r\n                        <tr>\r\n                            <th>  \r\n                                Output keys: \r\n                                <button onClick={() => addOutput()}>+</button>\r\n                            </th>\r\n                        </tr>\r\n                        {output.length == 0 ? \r\n                            <tr>\r\n                                <td>\r\n                                    null\r\n                                </td>\r\n                            </tr>\r\n                        :\r\n                        <>\r\n                        {output.map((item, index) => (\r\n                            <tr>\r\n                                <td>\r\n                                    <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index,e)}/>\r\n                                    <button onClick={() => removeOutput(index)}>-</button>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                        </>}\r\n                    </table>\r\n                    <br/>\r\n                    <table className=\"NodeTable\">\r\n                        <tr>\r\n                            <th> Model path: </th>\r\n                            <td>\r\n                                <input className=\"inputNode\" type=\"text\" value={path} onChange={(e) => setPath(e.target.value)} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th> Loss: </th>\r\n                            <td>\r\n                                <input className=\"inputNode\" type=\"text\" value={loss} onChange={(e) => setLoss(e.target.value)} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th> Metrics: </th>\r\n                            <td>\r\n                                <input className=\"inputNode\" type=\"text\" value={metrics} onChange={(e) => setMetrics(e.target.value)} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th> Optimizer: </th>\r\n                            <td>\r\n                                <input className=\"inputNode\" type=\"text\" value={optimizer} onChange={(e) => setOprimizer(e.target.value)} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th> Compile: </th>\r\n                            <td>\r\n                                <input type=\"checkbox\" value={compile} checked={compile} onChange={() => setCompile(!compile)} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th> Train: </th>\r\n                            <td>\r\n                                <input type=\"checkbox\" value={train} checked={train} onChange={() => setTrain(!train)} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th> Epochs: </th>\r\n                            <td>\r\n                                <input className=\"inputNode\" type=\"number\" value={epochs} onChange={(e) => setEpochs(e.target.value)} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th> Batch size: </th>\r\n                            <td>\r\n                                <input className=\"inputNode\" type=\"number\" value={batchSize} onChange={(e) => setBatchSize(e.target.value)} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th> Publish: </th>\r\n                            <td>\r\n                                <input type=\"checkbox\" value={publish} checked={publish} onChange={() => setPublish(!publish)} />\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </>\r\n                :\r\n                <>\r\n                    <table className=\"NodeTable\">\r\n                        <tr>\r\n                            <th> \r\n                                Input keys:\r\n                            </th>\r\n                            \r\n                        </tr>\r\n                        {input.length == 0 ? \r\n                            <tr>\r\n                                <td>\r\n                                    null\r\n                                </td>\r\n                            </tr>\r\n                        :\r\n                        <>\r\n                        {input.map((item, index) => (\r\n                            <tr>\r\n                                <td>\r\n                                    {item}\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                        </>}\r\n                    </table>\r\n                    <table className=\"NodeTable\">\r\n                        <tr>\r\n                            <th>  \r\n                                Output keys: \r\n                            </th>\r\n                        </tr>\r\n                        {output.length == 0 ? \r\n                            <tr>\r\n                                <td>\r\n                                    null\r\n                                </td>\r\n                            </tr>\r\n                        :\r\n                        <>\r\n                        {output.map((item, index) => (\r\n                            <tr>\r\n                                <td>\r\n                                    {item}\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n\r\n                    </>}\r\n                    </table>\r\n                    <br/>\r\n                    <table className=\"NodeTable\">\r\n                            <tr>\r\n                                <th> Model path: </th>\r\n                                <td> <p id=\"bilosta\">{path?path:'null'}</p> </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th> Loss: </th>\r\n                                <td> {loss?loss:'null'} </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th> Metrics: </th>\r\n                                <td> {metrics?metrics:'null'} </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th> Optimizer: </th>\r\n                                <td> {optimizer?optimizer:'null'} </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th> Compile: </th>\r\n                                <td> {compile?'true':'false'} </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th> Train: </th>\r\n                                <td> {train?'true':'false'} </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th> Epochs: </th>\r\n                                <td> {epochs?epochs:'null'} </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th> Batch size: </th>\r\n                                <td> {batchSize?batchSize:'null'} </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th> Publish: </th>\r\n                                <td> {publish?'true':'false'} </td>\r\n                            </tr>\r\n                        </table>\r\n                    </>    \r\n                    }\r\n                    <br/>\r\n                    <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataNormalizer.jsx",["188","189","190","191","192","193","194","195","196","197","198","199","200","201"],"import SelectInput from '@material-ui/core/Select/SelectInput';\r\nimport React, { forwardRef , useEffect,useState,useImperativeHandle,useCallback } from 'react';\r\nimport \"../Flow.css\";\r\n\r\nconst DataNormalizer = forwardRef((props) => {\r\n\r\n\r\n    const [update,setUpdate] = useState(0);\r\n    const [details,setDetails] = useState(0);\r\n\r\n    const [input,setInput] = useState([]);\r\n    const [output,setOutput] = useState([]);\r\n\r\n\r\n    const [index,setIndex] = useState(\r\n        {\r\n            \"available_params\": [],\r\n                \"input_keys\": [\r\n                    \"x_train\",\r\n                    \"x_test\"\r\n                ],\r\n                \"output_keys\": [\r\n                    \"x_train\",\r\n                    \"x_test\"\r\n                ],\r\n                \"params\": {},\r\n                \"type\": \"data_normalizer\"\r\n        }\r\n    );\r\n    \r\n    const fja = () =>\r\n    {\r\n        // let items = [...props.nodes];\r\n        // let item = {...items[props.id]};\r\n\r\n        // item.params.dataset = \"newmnist\";\r\n        // items[props.id] = item;\r\n\r\n        // props.setNodes({items});\r\n\r\n    }\r\n\r\n    useEffect(() =>{\r\n        setInput(props.nodes[props.id].input_keys);\r\n        setOutput(props?.nodes[props.id]?.output_keys);\r\n    },[props.nodes]);\r\n\r\n    useEffect(() => {\r\n        if(props.creationFlag)\r\n        {\r\n            let items = props.nodes;\r\n            let item =  index;\r\n            \r\n            items[props.id] = item;\r\n\r\n            props.setNodes(items);\r\n        }\r\n\r\n        //console.log(props.nodes[props.id]);\r\n    },[] );\r\n\r\n\r\n    const onChange = () =>\r\n    {\r\n        setUpdate(!update);\r\n        if(update)\r\n        {\r\n            //console.log(\"upisujem\");\r\n            var nodes = props.nodes;\r\n            \r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].output_keys = output;\r\n\r\n            props.setNodes(1);\r\n            //props.update()\r\n        }\r\n    }\r\n\r\n\r\n    const addInput = () =>\r\n    {\r\n        setInput(input => [...input,\"null\"]);\r\n    }\r\n\r\n    const removeInput = (index) =>\r\n    {\r\n        var temp = [...input];\r\n        temp.splice(index,1);\r\n        setInput(temp);\r\n    }\r\n\r\n    const changeInput = (index,e) =>\r\n    {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n    }\r\n\r\n    const addOutput = () =>\r\n    {\r\n        setOutput(output => [...output,\"null\"]);\r\n    }\r\n\r\n    const removeOutput = (index) =>\r\n    {\r\n        var temp = [...output];\r\n        temp.splice(index,1);\r\n        setOutput(temp);\r\n    }\r\n\r\n    const changeOutput = (index,e) =>\r\n    {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"node\">\r\n           {details == 0 && <br/>}\r\n            <span onClick={() => setDetails(!details)}><b>DataNormalizer</b></span>\r\n                {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update?\r\n                    <>\r\n                        <table className=\"NodeTable\">\r\n                            <tr>\r\n                                <th> \r\n                                    Input keys:\r\n                                    <button onClick={() => addInput()}>+</button>\r\n                                </th>\r\n                                \r\n                            </tr>\r\n                            {input.length == 0 ? \r\n                                <tr>\r\n                                    <td>\r\n                                        null\r\n                                    </td>\r\n                                </tr>\r\n                            :\r\n                            <>\r\n                            {input.map((item, index) => (\r\n                                <tr>\r\n                                    <td>\r\n                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index,e)}/>\r\n                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </>}\r\n                        </table>\r\n                        <table className=\"NodeTable\">\r\n                            <tr>\r\n                                <th>  \r\n                                    Output keys: \r\n                                    <button onClick={() => addOutput()}>+</button>\r\n                                </th>\r\n                            </tr>\r\n                            {output.length == 0 ? \r\n                                <tr>\r\n                                    <td>\r\n                                        null\r\n                                    </td>\r\n                                </tr>\r\n                            :\r\n                            <>\r\n                            {output.map((item, index) => (\r\n                                <tr>\r\n                                    <td>\r\n                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index,e)}/>\r\n                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </>}\r\n                        </table>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <table className=\"NodeTable\">\r\n                            <tr>\r\n                                <th> \r\n                                    Input keys:\r\n                                </th>\r\n                                \r\n                            </tr>\r\n                            {input.length == 0 ? \r\n                                <tr>\r\n                                    <td>\r\n                                        null\r\n                                    </td>\r\n                                </tr>\r\n                            :\r\n                            <>\r\n                            {input.map((item, index) => (\r\n                                <tr>\r\n                                    <td>\r\n                                        {item}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </>}\r\n                        </table>\r\n                        <table className=\"NodeTable\">\r\n                            <tr>\r\n                                <th>  \r\n                                    Output keys: \r\n                                </th>\r\n                            </tr>\r\n                            {output.length == 0 ? \r\n                                <tr>\r\n                                    <td>\r\n                                        null\r\n                                    </td>\r\n                                </tr>\r\n                            :\r\n                            <>\r\n                            {output.map((item, index) => (\r\n                                <tr>\r\n                                    <td>\r\n                                        {item}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </>}\r\n                        </table>\r\n                    </>\r\n                    }\r\n                    <br/>\r\n                    <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                </div>  \r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default DataNormalizer;","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataPlotter.jsx",["202","203","204","205","206","207","208","209","210"],"import React, { useEffect,useState } from 'react';\r\nimport \"../Flow.css\";\r\n\r\nexport default function DataPlotter(props){\r\n\r\n    const [details,setDetails] = useState(0);\r\n    const [update,setUpdate] = useState(0);\r\n\r\n    const [index,setIndex] = useState();\r\n\r\n    const [input,setInput] = useState([]);\r\n    const [output,setOutput] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setIndex(props.node.params[\"index\"]);\r\n        setInput(props.node.input_keys);\r\n        setOutput(props.node.output_keys);\r\n        //console.log(props.nodes);\r\n        //if(props.nodes[props.id].input_keys.length == 0)\r\n            //console.log(\"ZNOPRA\");\r\n        //console.log(props?.nodes[props.id]?.input_keys);\r\n    },[props.nodes] );\r\n\r\n\r\n\r\n    const onChange = () =>\r\n    {\r\n        setUpdate(!update);\r\n        if(update)\r\n        {\r\n            //console.log(\"upisujem\");\r\n            //var nodes = props.nodes;\r\n            \r\n            props.node.params[\"index\"] = index;\r\n            props.node.input_keys = input;\r\n            props.node.output_keys = output;\r\n\r\n            props.setNodes(1);\r\n            //props.update()\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const addInput = () =>\r\n    {\r\n        setInput(input => [...input,\"null\"]);\r\n    }\r\n\r\n    const removeInput = (index) =>\r\n    {\r\n        var temp = [...input];\r\n        temp.splice(index,1);\r\n        setInput(temp);\r\n    }\r\n\r\n    const changeInput = (index,e) =>\r\n    {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n    }\r\n\r\n    const addOutput = () =>\r\n    {\r\n        setOutput(output => [...output,\"null\"]);\r\n    }\r\n\r\n    const removeOutput = (index) =>\r\n    {\r\n        var temp = [...output];\r\n        temp.splice(index,1);\r\n        setOutput(temp);\r\n    }\r\n\r\n    const changeOutput = (index,e) =>\r\n    {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n    }\r\n\r\n    return(\r\n        <div className=\"node\">\r\n            {details == 0 && <br/>}\r\n            <span onClick={() => setDetails(!details)}><b>DataPlotter</b></span>\r\n            {details == 1 &&\r\n            <div>\r\n                <hr></hr>\r\n                {update == 1  ?\r\n                <>\r\n                <table className=\"NodeTable\">\r\n                    <tr>\r\n                        <th> \r\n                            Input keys:\r\n                            <button onClick={() => addInput()}>+</button>\r\n                        </th>\r\n                        \r\n                    </tr>\r\n                    {input.length == 0 ? \r\n                        <tr>\r\n                            <td>\r\n                                null\r\n                            </td>\r\n                        </tr>\r\n                    :\r\n                    <>\r\n                    {input.map((item, index) => (\r\n                        <tr>\r\n                            <td>\r\n                                <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index,e)}/>\r\n                                <button onClick={() => removeInput(index)}>-</button>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                    </>}\r\n                </table>\r\n                <table className=\"NodeTable\">\r\n                    <tr>\r\n                        <th>  \r\n                            Output keys: \r\n                            <button onClick={() => addOutput()}>+</button>\r\n                        </th>\r\n                    </tr>\r\n                    {output.length == 0 ? \r\n                        <tr>\r\n                            <td>\r\n                                null\r\n                            </td>\r\n                        </tr>\r\n                    :\r\n                    <>\r\n                    {output.map((item, index) => (\r\n                        <tr>\r\n                            <td>\r\n                                <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index,e)}/>\r\n                                <button onClick={() => removeOutput(index)}>-</button>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                    </>}\r\n                    </table>\r\n                    <table>\r\n                        <tr>\r\n                            <th> Index: </th>\r\n                            <td>\r\n                                <input type=\"text\" value={index} onChange={(e) => setIndex(e.target.value)} />\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </>\r\n                :\r\n                <>\r\n                    <table className=\"NodeTable\">\r\n                        <tr>\r\n                            <th> \r\n                                Input keys:\r\n                            </th>\r\n                            \r\n                        </tr>\r\n                        {input.length == 0 ? \r\n                            <tr>\r\n                                <td>\r\n                                    null\r\n                                </td>\r\n                            </tr>\r\n                        :\r\n                        <>\r\n                        {input.map((item, index) => (\r\n                            <tr>\r\n                                <td>\r\n                                    {item}\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                        </>}\r\n                    </table>\r\n                    <table className=\"NodeTable\">\r\n                        <tr>\r\n                            <th>  \r\n                                Output keys: \r\n                            </th>\r\n                        </tr>\r\n                        {output.length == 0 ? \r\n                            <tr>\r\n                                <td>\r\n                                    null\r\n                                </td>\r\n                            </tr>\r\n                        :\r\n                        <>\r\n                        {output.map((item, index) => (\r\n                            <tr>\r\n                                <td>\r\n                                    {item}\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                        </>}\r\n                    </table>\r\n                    <table className=\"NodeTable\">\r\n                        <tr>\r\n                            <th> Index: </th>\r\n                            <td> {index?index:'null'} </td>\r\n                        </tr>\r\n                    </table>\r\n                </>\r\n                }\r\n                <br/>\r\n                <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelEvaluator.jsx",["211","212","213","214","215","216","217","218","219","220","221"],"import React, { useEffect,useState } from 'react';\r\nimport \"../Flow.css\";\r\n\r\nexport default function ModelEvaluator(props){\r\n\r\n    const [update,setUpdate] = useState(0);\r\n    const [details,setDetails] = useState(0);\r\n\r\n    const [input,setInput] = useState([]);\r\n    const [output,setOutput] = useState([]);\r\n\r\n\r\n    const [index,setIndex] = useState(\r\n        {\r\n            \"available_params\": [],\r\n                \"input_keys\": [\r\n                    \"x_train\",\r\n                    \"x_test\"\r\n                ],\r\n                \"output_keys\": [\r\n                    \"x_train\",\r\n                    \"x_test\"\r\n                ],\r\n                \"params\": {},\r\n                \"type\": \"model_evaluator\"\r\n        }\r\n    );\r\n    \r\n    const fja = () =>\r\n    {\r\n        // let items = [...props.nodes];\r\n        // let item = {...items[props.id]};\r\n\r\n        // item.params.dataset = \"newmnist\";\r\n        // items[props.id] = item;\r\n\r\n        // props.setNodes({items});\r\n\r\n    }\r\n\r\n    useEffect(() =>{\r\n        setInput(props.nodes[props.id].input_keys);\r\n        setOutput(props?.nodes[props.id]?.output_keys);\r\n    },[props.nodes]);\r\n\r\n    useEffect(() => {\r\n        if(props.creationFlag)\r\n        {\r\n            let items = props.nodes;\r\n            let item =  index;\r\n            \r\n            items[props.id] = item;\r\n\r\n            props.setNodes(items);\r\n        }\r\n\r\n        //console.log(props.nodes[props.id]);\r\n    },[] );\r\n\r\n\r\n    const onChange = () =>\r\n    {\r\n        setUpdate(!update);\r\n        if(update)\r\n        {\r\n            //console.log(\"upisujem\");\r\n            var nodes = props.nodes;\r\n            \r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].output_keys = output;\r\n\r\n            props.setNodes(1);\r\n            //props.update()\r\n        }\r\n    }\r\n\r\n\r\n    const addInput = () =>\r\n    {\r\n        setInput(input => [...input,\"null\"]);\r\n    }\r\n\r\n    const removeInput = (index) =>\r\n    {\r\n        var temp = [...input];\r\n        temp.splice(index,1);\r\n        setInput(temp);\r\n    }\r\n\r\n    const changeInput = (index,e) =>\r\n    {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n    }\r\n\r\n    const addOutput = () =>\r\n    {\r\n        setOutput(output => [...output,\"null\"]);\r\n    }\r\n\r\n    const removeOutput = (index) =>\r\n    {\r\n        var temp = [...output];\r\n        temp.splice(index,1);\r\n        setOutput(temp);\r\n    }\r\n\r\n    const changeOutput = (index,e) =>\r\n    {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"node\">\r\n           {details == 0 && <br/>}\r\n            <span onClick={() => setDetails(!details)}><b>ModelEvaluator</b></span>\r\n                {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update?\r\n                    <>\r\n                        <table className=\"NodeTable\">\r\n                            <tr>\r\n                                <th> \r\n                                    Input keys:\r\n                                    <button onClick={() => addInput()}>+</button>\r\n                                </th>\r\n                                \r\n                            </tr>\r\n                            {input.length == 0 ? \r\n                                <tr>\r\n                                    <td>\r\n                                        null\r\n                                    </td>\r\n                                </tr>\r\n                            :\r\n                            <>\r\n                            {input.map((item, index) => (\r\n                                <tr>\r\n                                    <td>\r\n                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index,e)}/>\r\n                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </>}\r\n                        </table>\r\n                        <table className=\"NodeTable\">\r\n                            <tr>\r\n                                <th>  \r\n                                    Output keys: \r\n                                    <button onClick={() => addOutput()}>+</button>\r\n                                </th>\r\n                            </tr>\r\n                            {output.length == 0 ? \r\n                                <tr>\r\n                                    <td>\r\n                                        null\r\n                                    </td>\r\n                                </tr>\r\n                            :\r\n                            <>\r\n                            {output.map((item, index) => (\r\n                                <tr>\r\n                                    <td>\r\n                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index,e)}/>\r\n                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </>}\r\n                        </table>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <table className=\"NodeTable\">\r\n                            <tr>\r\n                                <th> \r\n                                    Input keys:\r\n                                </th>\r\n                                \r\n                            </tr>\r\n                            {input.length == 0 ? \r\n                                <tr>\r\n                                    <td>\r\n                                        null\r\n                                    </td>\r\n                                </tr>\r\n                            :\r\n                            <>\r\n                            {input.map((item, index) => (\r\n                                <tr>\r\n                                    <td>\r\n                                        {item}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </>}\r\n                        </table>\r\n                        <table className=\"NodeTable\">\r\n                            <tr>\r\n                                <th>  \r\n                                    Output keys: \r\n                                </th>\r\n                            </tr>\r\n                            {output.length == 0 ? \r\n                                <tr>\r\n                                    <td>\r\n                                        null\r\n                                    </td>\r\n                                </tr>\r\n                            :\r\n                            <>\r\n                            {output.map((item, index) => (\r\n                                <tr>\r\n                                    <td>\r\n                                        {item}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </>}\r\n                        </table>\r\n                    </>\r\n                    }\r\n                    <br/>\r\n                    <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                </div>  \r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\DataStandardizer.jsx",["222","223","224","225","226","227","228","229","230","231","232"],"import React, { useEffect,useState } from 'react';\r\nimport \"../Flow.css\";\r\n\r\nexport default function DataStandardizer(props){\r\n\r\n    const [update,setUpdate] = useState(0);\r\n    const [details,setDetails] = useState(0);\r\n\r\n    const [input,setInput] = useState([]);\r\n    const [output,setOutput] = useState([]);\r\n\r\n\r\n    const [index,setIndex] = useState(\r\n        {\r\n            \"available_params\": [],\r\n                \"input_keys\": [\r\n                    \"x_train\",\r\n                    \"x_test\"\r\n                ],\r\n                \"output_keys\": [\r\n                    \"x_train\",\r\n                    \"x_test\"\r\n                ],\r\n                \"params\": {},\r\n                \"type\": \"data_standardizer\"\r\n        }\r\n    );\r\n    \r\n    const fja = () =>\r\n    {\r\n        // let items = [...props.nodes];\r\n        // let item = {...items[props.id]};\r\n\r\n        // item.params.dataset = \"newmnist\";\r\n        // items[props.id] = item;\r\n\r\n        // props.setNodes({items});\r\n\r\n    }\r\n\r\n    useEffect(() =>{\r\n        setInput(props.nodes[props.id].input_keys);\r\n        setOutput(props?.nodes[props.id]?.output_keys);\r\n    },[props.nodes]);\r\n\r\n    useEffect(() => {\r\n        if(props.creationFlag)\r\n        {\r\n            let items = props.nodes;\r\n            let item =  index;\r\n            \r\n            items[props.id] = item;\r\n\r\n            props.setNodes(items);\r\n        }\r\n\r\n        //console.log(props.nodes[props.id]);\r\n    },[] );\r\n\r\n\r\n    const onChange = () =>\r\n    {\r\n        setUpdate(!update);\r\n        if(update)\r\n        {\r\n            //console.log(\"upisujem\");\r\n            var nodes = props.nodes;\r\n            \r\n            nodes[props.id].input_keys = input;\r\n            nodes[props.id].output_keys = output;\r\n\r\n            props.setNodes(1);\r\n            //props.update()\r\n        }\r\n    }\r\n\r\n\r\n    const addInput = () =>\r\n    {\r\n        setInput(input => [...input,\"null\"]);\r\n    }\r\n\r\n    const removeInput = (index) =>\r\n    {\r\n        var temp = [...input];\r\n        temp.splice(index,1);\r\n        setInput(temp);\r\n    }\r\n\r\n    const changeInput = (index,e) =>\r\n    {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n    }\r\n\r\n    const addOutput = () =>\r\n    {\r\n        setOutput(output => [...output,\"null\"]);\r\n    }\r\n\r\n    const removeOutput = (index) =>\r\n    {\r\n        var temp = [...output];\r\n        temp.splice(index,1);\r\n        setOutput(temp);\r\n    }\r\n\r\n    const changeOutput = (index,e) =>\r\n    {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"node\">\r\n           {details == 0 && <br/>}\r\n            <span onClick={() => setDetails(!details)}><b>DataStandardizer</b></span>\r\n                {details == 1 &&\r\n                <div>\r\n                    <hr></hr>\r\n                    {update?\r\n                    <>\r\n                        <table className=\"NodeTable\">\r\n                            <tr>\r\n                                <th> \r\n                                    Input keys:\r\n                                    <button onClick={() => addInput()}>+</button>\r\n                                </th>\r\n                                \r\n                            </tr>\r\n                            {input.length == 0 ? \r\n                                <tr>\r\n                                    <td>\r\n                                        null\r\n                                    </td>\r\n                                </tr>\r\n                            :\r\n                            <>\r\n                            {input.map((item, index) => (\r\n                                <tr>\r\n                                    <td>\r\n                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index,e)}/>\r\n                                        <button onClick={() => removeInput(index)}>-</button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </>}\r\n                        </table>\r\n                        <table className=\"NodeTable\">\r\n                            <tr>\r\n                                <th>  \r\n                                    Output keys: \r\n                                    <button onClick={() => addOutput()}>+</button>\r\n                                </th>\r\n                            </tr>\r\n                            {output.length == 0 ? \r\n                                <tr>\r\n                                    <td>\r\n                                        null\r\n                                    </td>\r\n                                </tr>\r\n                            :\r\n                            <>\r\n                            {output.map((item, index) => (\r\n                                <tr>\r\n                                    <td>\r\n                                        <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index,e)}/>\r\n                                        <button onClick={() => removeOutput(index)}>-</button>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </>}\r\n                        </table>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <table className=\"NodeTable\">\r\n                            <tr>\r\n                                <th> \r\n                                    Input keys:\r\n                                </th>\r\n                                \r\n                            </tr>\r\n                            {input.length == 0 ? \r\n                                <tr>\r\n                                    <td>\r\n                                        null\r\n                                    </td>\r\n                                </tr>\r\n                            :\r\n                            <>\r\n                            {input.map((item, index) => (\r\n                                <tr>\r\n                                    <td>\r\n                                        {item}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </>}\r\n                        </table>\r\n                        <table className=\"NodeTable\">\r\n                            <tr>\r\n                                <th>  \r\n                                    Output keys: \r\n                                </th>\r\n                            </tr>\r\n                            {output.length == 0 ? \r\n                                <tr>\r\n                                    <td>\r\n                                        null\r\n                                    </td>\r\n                                </tr>\r\n                            :\r\n                            <>\r\n                            {output.map((item, index) => (\r\n                                <tr>\r\n                                    <td>\r\n                                        {item}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                            </>}\r\n                        </table>\r\n                    </>\r\n                    }\r\n                    <br/>\r\n                    <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n                </div>  \r\n            }\r\n        </div>\r\n    )\r\n}","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\Nodes\\ModelPredictor.jsx",["233","234","235","236","237","238","239","240","241"],"import React, { useEffect,useState } from 'react';\r\nimport \"../Flow.css\";\r\n\r\nexport default function ModelPredictor(props){\r\n\r\n    const [details,setDetails] = useState(0);\r\n    const [update,setUpdate] = useState(0);\r\n\r\n    const [index,setIndex] = useState();\r\n\r\n    const [input,setInput] = useState([]);\r\n    const [output,setOutput] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setIndex(props.node.params[\"index\"]);\r\n        setInput(props.node.input_keys);\r\n        setOutput(props.node.output_keys);\r\n        //console.log(props.nodes);\r\n        //if(props.nodes[props.id].input_keys.length == 0)\r\n            //console.log(\"ZNOPRA\");\r\n        //console.log(props?.nodes[props.id]?.input_keys);\r\n    },[props.nodes] );\r\n\r\n\r\n\r\n    const onChange = () =>\r\n    {\r\n        setUpdate(!update);\r\n        if(update)\r\n        {\r\n            //console.log(\"upisujem\");\r\n            //var nodes = props.nodes;\r\n            \r\n            props.node.params[\"index\"] = index;\r\n            props.node.input_keys = input;\r\n            props.node.output_keys = output;\r\n\r\n            props.setNodes(1);\r\n            //props.update()\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const addInput = () =>\r\n    {\r\n        setInput(input => [...input,\"null\"]);\r\n    }\r\n\r\n    const removeInput = (index) =>\r\n    {\r\n        var temp = [...input];\r\n        temp.splice(index,1);\r\n        setInput(temp);\r\n    }\r\n\r\n    const changeInput = (index,e) =>\r\n    {\r\n        var temp = [...input];\r\n        temp[index] = e.target.value;\r\n        setInput(temp);\r\n    }\r\n\r\n    const addOutput = () =>\r\n    {\r\n        setOutput(output => [...output,\"null\"]);\r\n    }\r\n\r\n    const removeOutput = (index) =>\r\n    {\r\n        var temp = [...output];\r\n        temp.splice(index,1);\r\n        setOutput(temp);\r\n    }\r\n\r\n    const changeOutput = (index,e) =>\r\n    {\r\n        var temp = [...output];\r\n        temp[index] = e.target.value;\r\n        setOutput(temp);\r\n    }\r\n\r\n    return(\r\n        <div className=\"node\">\r\n            {details == 0 && <br/>}\r\n            <span onClick={() => setDetails(!details)}><b>ModelPredictor</b></span>\r\n            {details == 1 &&\r\n            <div>\r\n                <hr></hr>\r\n                {update == 1  ?\r\n                <>\r\n                <table className=\"NodeTable\">\r\n                    <tr>\r\n                        <th> \r\n                            Input keys:\r\n                            <button onClick={() => addInput()}>+</button>\r\n                        </th>\r\n                        \r\n                    </tr>\r\n                    {input.length == 0 ? \r\n                        <tr>\r\n                            <td>\r\n                                null\r\n                            </td>\r\n                        </tr>\r\n                    :\r\n                    <>\r\n                    {input.map((item, index) => (\r\n                        <tr>\r\n                            <td>\r\n                                <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeInput(index,e)}/>\r\n                                <button onClick={() => removeInput(index)}>-</button>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                    </>}\r\n                </table>\r\n                <table className=\"NodeTable\">\r\n                    <tr>\r\n                        <th>  \r\n                            Output keys: \r\n                            <button onClick={() => addOutput()}>+</button>\r\n                        </th>\r\n                    </tr>\r\n                    {output.length == 0 ? \r\n                        <tr>\r\n                            <td>\r\n                                null\r\n                            </td>\r\n                        </tr>\r\n                    :\r\n                    <>\r\n                    {output.map((item, index) => (\r\n                        <tr>\r\n                            <td>\r\n                                <input className=\"inputNode\" type=\"text\" value={item} onChange={(e) => changeOutput(index,e)}/>\r\n                                <button onClick={() => removeOutput(index)}>-</button>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                    </>}\r\n                    </table>\r\n                    <table>\r\n                        <tr>\r\n                            <th> Index: </th>\r\n                            <td>\r\n                                <input type=\"number\" value={index} onChange={(e) => setIndex(e.target.value)} />\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </>\r\n                :\r\n                <>\r\n                    <table className=\"NodeTable\">\r\n                        <tr>\r\n                            <th> \r\n                                Input keys:\r\n                            </th>\r\n                            \r\n                        </tr>\r\n                        {input.length == 0 ? \r\n                            <tr>\r\n                                <td>\r\n                                    null\r\n                                </td>\r\n                            </tr>\r\n                        :\r\n                        <>\r\n                        {input.map((item, index) => (\r\n                            <tr>\r\n                                <td>\r\n                                    {item}\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                        </>}\r\n                    </table>\r\n                    <table className=\"NodeTable\">\r\n                        <tr>\r\n                            <th>  \r\n                                Output keys: \r\n                            </th>\r\n                        </tr>\r\n                        {output.length == 0 ? \r\n                            <tr>\r\n                                <td>\r\n                                    null\r\n                                </td>\r\n                            </tr>\r\n                        :\r\n                        <>\r\n                        {output.map((item, index) => (\r\n                            <tr>\r\n                                <td>\r\n                                    {item}\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                        </>}\r\n                    </table>\r\n                    <table className=\"NodeTable\">\r\n                        <tr>\r\n                            <th> Index: </th>\r\n                            <td> {index?index:'null'} </td>\r\n                        </tr>\r\n                    </table>\r\n                </>\r\n                }\r\n                <br/>\r\n                <button onClick={() => onChange()}>{update == 1 ? 'Submit' : 'Update'}</button>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}",["242","243"],"D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\FlowCreate.jsx",["244","245","246","247","248","249","250","251","252","253","254","255","256","257"],"import React, { useEffect,useState } from 'react';\r\nimport './Flow.css';\r\nimport { useCookies } from 'react-cookie';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport { useParams } from 'react-router-dom';\r\nimport DatasetLoader from './Nodes/DatasetLoader';\r\nimport ModelLoader from './Nodes/ModelLoader';\r\nimport DataNormalizer from './Nodes/DataNormalizer';\r\nimport DataPlotter from './Nodes/DataPlotter';\r\nimport ModelEvaluator from './Nodes/ModelEvaluator';\r\nimport DataStandardizer from './Nodes/DataStandardizer';\r\nimport ModelPredictor from './Nodes/ModelPredictor';\r\n\r\nexport default function FlowCreate({flowname},{flowid}){\r\n\r\n    const [cookies] = useCookies(['user']);\r\n\r\n    const file = JSON.stringify({\r\n        \"created_by\": cookies.id,\r\n        \"flow\" : flowid,\r\n        \"prev_flow_version\": 7,\r\n        \"serialized_flow\": {\r\n            \"flow_name\": {flowname},\r\n            \"flow_version\": \"0.1.1\",\r\n            \"nodes\": [\r\n                {\r\n                    \"available_params\": [\r\n                        \"dataset\"\r\n                    ],\r\n                    \"input_keys\": [],\r\n                    \"output_keys\": [\r\n                        \"x_train\",\r\n                        \"x_test\",\r\n                        \"y_train\",\r\n                        \"y_test\"\r\n                    ],\r\n                    \"params\": {\r\n                        \"dataset\": \"mnist\"\r\n                    },\r\n                    \"type\": \"keras_dataset_loader\"\r\n                }]}});\r\n\r\n    useEffect(() => {\r\n        console.log(file);\r\n    },[] );\r\n             \r\n\r\n    return(\r\n        <div className=\"flowCreate\">\r\n            <div className=\"nodeSelection\">\r\n                <p id=\"naslov\">Create flow version for: {flowname}</p>\r\n                <p>Add commponent:</p>\r\n                <ul>\r\n                    <p className=\"link\">- DataNormalizer</p>\r\n                    <p className=\"link\">- DataPlotter</p>\r\n                    <p className=\"link\">- DatasetLoader</p>\r\n                    <p className=\"link\">- DataStandardizer</p>\r\n                    <p className=\"link\">- ModelEvaluator</p>\r\n                    <p className=\"link\">- ModelLoader</p>\r\n                    <p className=\"link\">- ModlerPredictor</p>\r\n                </ul>\r\n            </div>\r\n            <div className=\"flowReview\">\r\n                ALO ALO\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\n","D:\\Podaci\\7. sem\\Arhitektura i projektovanje softvera\\ml-pipeline-vcs\\fe_app\\src\\FlowVersionCreate.jsx",["258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273"],"import React, { forwardRef, useRef, useEffect,useState,useImperativeHandle } from 'react';\r\nimport './Flow.css';\r\nimport { useCookies } from 'react-cookie';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport { useParams } from 'react-router-dom';\r\nimport DatasetLoader from './Nodes/DatasetLoader';\r\nimport ModelLoader from './Nodes/ModelLoader';\r\nimport DataNormalizer from './Nodes/DataNormalizer';\r\nimport DataPlotter from './Nodes/DataPlotter';\r\nimport ModelEvaluator from './Nodes/ModelEvaluator';\r\nimport DataStandardizer from './Nodes/DataStandardizer';\r\nimport ModelPredictor from './Nodes/ModelPredictor';\r\n\r\nexport default function FlowVersionCreate({flowname,flowid,prev}){\r\n\r\n    const [cookies] = useCookies(['user']);\r\n\r\n    const [commponents,setCommponents] = useState([]);\r\n    const [save,setSave] = useState(false);\r\n    const [noOfNodes,setNoOfNodes] = useState(0);\r\n\r\n    const [nodes,setNodes] = useState(\r\n        [\r\n            // {\r\n            //     \"available_params\": [\r\n            //         \"dataset\"\r\n            //     ],\r\n            //     \"input_keys\": [],\r\n            //     \"output_keys\": [\r\n            //         \"x_train\",\r\n            //         \"x_test\",\r\n            //         \"y_train\",\r\n            //         \"y_test\"\r\n            //     ],\r\n            //     \"params\": {\r\n            //         \"dataset\": \"mnist\"\r\n            //     },\r\n            //     \"type\": \"keras_dataset_loader\"\r\n            // },\r\n            // {\r\n            //     \"available_params\": [\r\n            //         \"dataset\"\r\n            //     ],\r\n            //     \"input_keys\": [],\r\n            //     \"output_keys\": [\r\n            //         \"x_train\",\r\n            //         \"x_test\",\r\n            //         \"y_train\",\r\n            //         \"y_test\"\r\n            //     ],\r\n            //     \"params\": {\r\n            //         \"dataset\": \"mnist2\"\r\n            //     },\r\n            //     \"type\": \"keras_dataset_loader\"\r\n            // }\r\n        ])\r\n\r\n    const [flow,setFlow] = useState(\r\n    {\r\n        \"created_by\": cookies.id,\r\n        \"flow\" : flowid,\r\n        \"prev_flow_version\": prev,\r\n        \"serialized_flow\": {\r\n            \"flow_name\": flowname,\r\n            \"flow_version\": \"0.1.1\",\r\n            \"nodes\": nodes\r\n    }})\r\n\r\n\r\n    useEffect(() => {\r\n        \r\n    },[] );\r\n\r\n\r\n\r\n    const handleClick = () => {\r\n        console.log(nodes);\r\n\r\n        let item = flow;\r\n        item.serialized_flow.nodes = nodes;\r\n        \r\n        setFlow(item);\r\n\r\n        // let item = {...items[props.id]};\r\n\r\n        console.log(flow);\r\n        console.log(Object.keys(flow.serialized_flow.nodes[0]).length); \r\n    }\r\n\r\n    const addNode = () =>\r\n    {\r\n        setCommponents([...commponents,<DataNormalizer nodes={nodes} setNodes={setNodes} id={noOfNodes} creationFlag={true}></DataNormalizer>])\r\n        setNoOfNodes(1+noOfNodes);\r\n    } \r\n             \r\n\r\n    return(\r\n        <div className=\"flowCreate\">\r\n            <div className=\"nodeSelection\">\r\n                <p id=\"naslov\">Create flow version for: {flowname}</p>\r\n                <p>Add commponent:</p>\r\n                <ul>\r\n                    <p className=\"link\" onClick={() => addNode()}>- DataNormalizer</p>\r\n                    <p className=\"link\">- DataPlotter</p>\r\n                    <p className=\"link\">- DatasetLoader</p>\r\n                    <p className=\"link\">- DataStandardizer</p>\r\n                    <p className=\"link\">- ModelEvaluator</p>\r\n                    <p className=\"link\">- ModelLoader</p>\r\n                    <p className=\"link\">- ModlerPredictor</p>\r\n                </ul>\r\n                <button onClick={() => handleClick()}>Save</button>\r\n            </div>\r\n            <div className=\"flowReview\">\r\n                {commponents?.map(commponent =>\r\n                    (\r\n                        commponent\r\n                    ))}\r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n    \r\n}\r\n",{"ruleId":"274","replacedBy":"275"},{"ruleId":"276","replacedBy":"277"},{"ruleId":"278","severity":1,"message":"279","line":11,"column":8,"nodeType":"280","messageId":"281","endLine":11,"endColumn":18},{"ruleId":"282","severity":1,"message":"283","line":39,"column":18,"nodeType":"284","messageId":"285","endLine":39,"endColumn":20},{"ruleId":"278","severity":1,"message":"286","line":1,"column":17,"nodeType":"280","messageId":"281","endLine":1,"endColumn":26},{"ruleId":"278","severity":1,"message":"287","line":10,"column":12,"nodeType":"280","messageId":"281","endLine":10,"endColumn":19},{"ruleId":"278","severity":1,"message":"288","line":10,"column":33,"nodeType":"280","messageId":"281","endLine":10,"endColumn":46},{"ruleId":"278","severity":1,"message":"289","line":2,"column":27,"nodeType":"280","messageId":"281","endLine":2,"endColumn":33},{"ruleId":"278","severity":1,"message":"290","line":2,"column":35,"nodeType":"280","messageId":"281","endLine":2,"endColumn":41},{"ruleId":"278","severity":1,"message":"291","line":2,"column":43,"nodeType":"280","messageId":"281","endLine":2,"endColumn":48},{"ruleId":"278","severity":1,"message":"292","line":5,"column":8,"nodeType":"280","messageId":"281","endLine":5,"endColumn":18},{"ruleId":"278","severity":1,"message":"293","line":6,"column":8,"nodeType":"280","messageId":"281","endLine":6,"endColumn":18},{"ruleId":"278","severity":1,"message":"294","line":7,"column":8,"nodeType":"280","messageId":"281","endLine":7,"endColumn":14},{"ruleId":"295","severity":1,"message":"296","line":19,"column":7,"nodeType":"297","endLine":19,"endColumn":9,"suggestions":"298"},{"ruleId":"278","severity":1,"message":"299","line":9,"column":21,"nodeType":"280","messageId":"281","endLine":9,"endColumn":31},{"ruleId":"300","severity":1,"message":"301","line":68,"column":25,"nodeType":"302","endLine":68,"endColumn":45},{"ruleId":"278","severity":1,"message":"303","line":1,"column":27,"nodeType":"280","messageId":"281","endLine":1,"endColumn":37},{"ruleId":"278","severity":1,"message":"304","line":1,"column":38,"nodeType":"280","messageId":"281","endLine":1,"endColumn":46},{"ruleId":"278","severity":1,"message":"289","line":2,"column":27,"nodeType":"280","messageId":"281","endLine":2,"endColumn":33},{"ruleId":"278","severity":1,"message":"290","line":2,"column":35,"nodeType":"280","messageId":"281","endLine":2,"endColumn":41},{"ruleId":"278","severity":1,"message":"291","line":2,"column":43,"nodeType":"280","messageId":"281","endLine":2,"endColumn":48},{"ruleId":"278","severity":1,"message":"305","line":3,"column":10,"nodeType":"280","messageId":"281","endLine":3,"endColumn":14},{"ruleId":"278","severity":1,"message":"287","line":9,"column":12,"nodeType":"280","messageId":"281","endLine":9,"endColumn":19},{"ruleId":"278","severity":1,"message":"286","line":1,"column":17,"nodeType":"280","messageId":"281","endLine":1,"endColumn":26},{"ruleId":"278","severity":1,"message":"289","line":2,"column":27,"nodeType":"280","messageId":"281","endLine":2,"endColumn":33},{"ruleId":"278","severity":1,"message":"290","line":2,"column":35,"nodeType":"280","messageId":"281","endLine":2,"endColumn":41},{"ruleId":"278","severity":1,"message":"291","line":2,"column":43,"nodeType":"280","messageId":"281","endLine":2,"endColumn":48},{"ruleId":"278","severity":1,"message":"293","line":4,"column":8,"nodeType":"280","messageId":"281","endLine":4,"endColumn":18},{"ruleId":"278","severity":1,"message":"306","line":5,"column":8,"nodeType":"280","messageId":"281","endLine":5,"endColumn":13},{"ruleId":"278","severity":1,"message":"307","line":6,"column":8,"nodeType":"280","messageId":"281","endLine":6,"endColumn":13},{"ruleId":"278","severity":1,"message":"308","line":1,"column":17,"nodeType":"280","messageId":"281","endLine":1,"endColumn":31},{"ruleId":"295","severity":1,"message":"309","line":37,"column":7,"nodeType":"297","endLine":37,"endColumn":15,"suggestions":"310"},{"ruleId":"278","severity":1,"message":"311","line":60,"column":15,"nodeType":"280","messageId":"281","endLine":60,"endColumn":19},{"ruleId":"282","severity":1,"message":"283","line":115,"column":25,"nodeType":"284","messageId":"285","endLine":115,"endColumn":27},{"ruleId":"278","severity":1,"message":"312","line":16,"column":8,"nodeType":"280","messageId":"281","endLine":16,"endColumn":18},{"ruleId":"278","severity":1,"message":"313","line":27,"column":12,"nodeType":"280","messageId":"281","endLine":27,"endColumn":17},{"ruleId":"278","severity":1,"message":"314","line":27,"column":18,"nodeType":"280","messageId":"281","endLine":27,"endColumn":26},{"ruleId":"278","severity":1,"message":"315","line":29,"column":12,"nodeType":"280","messageId":"281","endLine":29,"endColumn":18},{"ruleId":"278","severity":1,"message":"316","line":29,"column":19,"nodeType":"280","messageId":"281","endLine":29,"endColumn":28},{"ruleId":"278","severity":1,"message":"317","line":32,"column":12,"nodeType":"280","messageId":"281","endLine":32,"endColumn":16},{"ruleId":"278","severity":1,"message":"318","line":32,"column":17,"nodeType":"280","messageId":"281","endLine":32,"endColumn":24},{"ruleId":"295","severity":1,"message":"319","line":43,"column":7,"nodeType":"297","endLine":43,"endColumn":9,"suggestions":"320"},{"ruleId":"295","severity":1,"message":"321","line":47,"column":7,"nodeType":"297","endLine":47,"endColumn":14,"suggestions":"322"},{"ruleId":"282","severity":1,"message":"283","line":152,"column":32,"nodeType":"284","messageId":"285","endLine":152,"endColumn":34},{"ruleId":"282","severity":1,"message":"283","line":155,"column":32,"nodeType":"284","messageId":"285","endLine":155,"endColumn":34},{"ruleId":"282","severity":1,"message":"283","line":158,"column":32,"nodeType":"284","messageId":"285","endLine":158,"endColumn":34},{"ruleId":"282","severity":1,"message":"283","line":161,"column":32,"nodeType":"284","messageId":"285","endLine":161,"endColumn":34},{"ruleId":"282","severity":1,"message":"283","line":164,"column":32,"nodeType":"284","messageId":"285","endLine":164,"endColumn":34},{"ruleId":"282","severity":1,"message":"283","line":167,"column":32,"nodeType":"284","messageId":"285","endLine":167,"endColumn":34},{"ruleId":"282","severity":1,"message":"283","line":170,"column":32,"nodeType":"284","messageId":"285","endLine":170,"endColumn":34},{"ruleId":"282","severity":1,"message":"283","line":175,"column":19,"nodeType":"284","messageId":"285","endLine":175,"endColumn":21},{"ruleId":"278","severity":1,"message":"323","line":2,"column":10,"nodeType":"280","messageId":"281","endLine":2,"endColumn":19},{"ruleId":"295","severity":1,"message":"324","line":26,"column":7,"nodeType":"297","endLine":26,"endColumn":20,"suggestions":"325"},{"ruleId":"282","severity":1,"message":"283","line":88,"column":22,"nodeType":"284","messageId":"285","endLine":88,"endColumn":24},{"ruleId":"282","severity":1,"message":"283","line":91,"column":26,"nodeType":"284","messageId":"285","endLine":91,"endColumn":28},{"ruleId":"282","severity":1,"message":"283","line":104,"column":43,"nodeType":"284","messageId":"285","endLine":104,"endColumn":45},{"ruleId":"282","severity":1,"message":"283","line":129,"column":44,"nodeType":"284","messageId":"285","endLine":129,"endColumn":46},{"ruleId":"282","severity":1,"message":"283","line":164,"column":43,"nodeType":"284","messageId":"285","endLine":164,"endColumn":45},{"ruleId":"282","severity":1,"message":"283","line":187,"column":44,"nodeType":"284","messageId":"285","endLine":187,"endColumn":46},{"ruleId":"282","severity":1,"message":"283","line":209,"column":64,"nodeType":"284","messageId":"285","endLine":209,"endColumn":66},{"ruleId":"282","severity":1,"message":"283","line":106,"column":22,"nodeType":"284","messageId":"285","endLine":106,"endColumn":24},{"ruleId":"282","severity":1,"message":"283","line":108,"column":22,"nodeType":"284","messageId":"285","endLine":108,"endColumn":24},{"ruleId":"282","severity":1,"message":"283","line":111,"column":25,"nodeType":"284","messageId":"285","endLine":111,"endColumn":27},{"ruleId":"282","severity":1,"message":"283","line":121,"column":39,"nodeType":"284","messageId":"285","endLine":121,"endColumn":41},{"ruleId":"282","severity":1,"message":"283","line":146,"column":40,"nodeType":"284","messageId":"285","endLine":146,"endColumn":42},{"ruleId":"282","severity":1,"message":"283","line":231,"column":39,"nodeType":"284","messageId":"285","endLine":231,"endColumn":41},{"ruleId":"282","severity":1,"message":"283","line":254,"column":40,"nodeType":"284","messageId":"285","endLine":254,"endColumn":42},{"ruleId":"282","severity":1,"message":"283","line":314,"column":64,"nodeType":"284","messageId":"285","endLine":314,"endColumn":66},{"ruleId":"278","severity":1,"message":"326","line":1,"column":8,"nodeType":"280","messageId":"281","endLine":1,"endColumn":19},{"ruleId":"278","severity":1,"message":"327","line":2,"column":49,"nodeType":"280","messageId":"281","endLine":2,"endColumn":68},{"ruleId":"278","severity":1,"message":"328","line":2,"column":69,"nodeType":"280","messageId":"281","endLine":2,"endColumn":80},{"ruleId":"278","severity":1,"message":"329","line":15,"column":18,"nodeType":"280","messageId":"281","endLine":15,"endColumn":26},{"ruleId":"278","severity":1,"message":"330","line":31,"column":11,"nodeType":"280","messageId":"281","endLine":31,"endColumn":14},{"ruleId":"295","severity":1,"message":"331","line":46,"column":7,"nodeType":"297","endLine":46,"endColumn":20,"suggestions":"332"},{"ruleId":"295","severity":1,"message":"333","line":60,"column":7,"nodeType":"297","endLine":60,"endColumn":9,"suggestions":"334"},{"ruleId":"282","severity":1,"message":"283","line":122,"column":21,"nodeType":"284","messageId":"285","endLine":122,"endColumn":23},{"ruleId":"282","severity":1,"message":"283","line":124,"column":26,"nodeType":"284","messageId":"285","endLine":124,"endColumn":28},{"ruleId":"282","severity":1,"message":"283","line":137,"column":43,"nodeType":"284","messageId":"285","endLine":137,"endColumn":45},{"ruleId":"282","severity":1,"message":"283","line":162,"column":44,"nodeType":"284","messageId":"285","endLine":162,"endColumn":46},{"ruleId":"282","severity":1,"message":"283","line":190,"column":43,"nodeType":"284","messageId":"285","endLine":190,"endColumn":45},{"ruleId":"282","severity":1,"message":"283","line":213,"column":44,"nodeType":"284","messageId":"285","endLine":213,"endColumn":46},{"ruleId":"282","severity":1,"message":"283","line":233,"column":64,"nodeType":"284","messageId":"285","endLine":233,"endColumn":66},{"ruleId":"295","severity":1,"message":"335","line":22,"column":7,"nodeType":"297","endLine":22,"endColumn":20,"suggestions":"336"},{"ruleId":"282","severity":1,"message":"283","line":85,"column":22,"nodeType":"284","messageId":"285","endLine":85,"endColumn":24},{"ruleId":"282","severity":1,"message":"283","line":87,"column":22,"nodeType":"284","messageId":"285","endLine":87,"endColumn":24},{"ruleId":"282","severity":1,"message":"283","line":90,"column":25,"nodeType":"284","messageId":"285","endLine":90,"endColumn":27},{"ruleId":"282","severity":1,"message":"283","line":100,"column":35,"nodeType":"284","messageId":"285","endLine":100,"endColumn":37},{"ruleId":"282","severity":1,"message":"283","line":125,"column":36,"nodeType":"284","messageId":"285","endLine":125,"endColumn":38},{"ruleId":"282","severity":1,"message":"283","line":161,"column":39,"nodeType":"284","messageId":"285","endLine":161,"endColumn":41},{"ruleId":"282","severity":1,"message":"283","line":184,"column":40,"nodeType":"284","messageId":"285","endLine":184,"endColumn":42},{"ruleId":"282","severity":1,"message":"283","line":210,"column":60,"nodeType":"284","messageId":"285","endLine":210,"endColumn":62},{"ruleId":"278","severity":1,"message":"329","line":13,"column":18,"nodeType":"280","messageId":"281","endLine":13,"endColumn":26},{"ruleId":"278","severity":1,"message":"330","line":29,"column":11,"nodeType":"280","messageId":"281","endLine":29,"endColumn":14},{"ruleId":"295","severity":1,"message":"331","line":44,"column":7,"nodeType":"297","endLine":44,"endColumn":20,"suggestions":"337"},{"ruleId":"295","severity":1,"message":"333","line":58,"column":7,"nodeType":"297","endLine":58,"endColumn":9,"suggestions":"338"},{"ruleId":"282","severity":1,"message":"283","line":120,"column":21,"nodeType":"284","messageId":"285","endLine":120,"endColumn":23},{"ruleId":"282","severity":1,"message":"283","line":122,"column":26,"nodeType":"284","messageId":"285","endLine":122,"endColumn":28},{"ruleId":"282","severity":1,"message":"283","line":135,"column":43,"nodeType":"284","messageId":"285","endLine":135,"endColumn":45},{"ruleId":"282","severity":1,"message":"283","line":160,"column":44,"nodeType":"284","messageId":"285","endLine":160,"endColumn":46},{"ruleId":"282","severity":1,"message":"283","line":188,"column":43,"nodeType":"284","messageId":"285","endLine":188,"endColumn":45},{"ruleId":"282","severity":1,"message":"283","line":211,"column":44,"nodeType":"284","messageId":"285","endLine":211,"endColumn":46},{"ruleId":"282","severity":1,"message":"283","line":231,"column":64,"nodeType":"284","messageId":"285","endLine":231,"endColumn":66},{"ruleId":"278","severity":1,"message":"329","line":13,"column":18,"nodeType":"280","messageId":"281","endLine":13,"endColumn":26},{"ruleId":"278","severity":1,"message":"330","line":29,"column":11,"nodeType":"280","messageId":"281","endLine":29,"endColumn":14},{"ruleId":"295","severity":1,"message":"331","line":44,"column":7,"nodeType":"297","endLine":44,"endColumn":20,"suggestions":"339"},{"ruleId":"295","severity":1,"message":"333","line":58,"column":7,"nodeType":"297","endLine":58,"endColumn":9,"suggestions":"340"},{"ruleId":"282","severity":1,"message":"283","line":120,"column":21,"nodeType":"284","messageId":"285","endLine":120,"endColumn":23},{"ruleId":"282","severity":1,"message":"283","line":122,"column":26,"nodeType":"284","messageId":"285","endLine":122,"endColumn":28},{"ruleId":"282","severity":1,"message":"283","line":135,"column":43,"nodeType":"284","messageId":"285","endLine":135,"endColumn":45},{"ruleId":"282","severity":1,"message":"283","line":160,"column":44,"nodeType":"284","messageId":"285","endLine":160,"endColumn":46},{"ruleId":"282","severity":1,"message":"283","line":188,"column":43,"nodeType":"284","messageId":"285","endLine":188,"endColumn":45},{"ruleId":"282","severity":1,"message":"283","line":211,"column":44,"nodeType":"284","messageId":"285","endLine":211,"endColumn":46},{"ruleId":"282","severity":1,"message":"283","line":231,"column":64,"nodeType":"284","messageId":"285","endLine":231,"endColumn":66},{"ruleId":"295","severity":1,"message":"335","line":22,"column":7,"nodeType":"297","endLine":22,"endColumn":20,"suggestions":"341"},{"ruleId":"282","severity":1,"message":"283","line":85,"column":22,"nodeType":"284","messageId":"285","endLine":85,"endColumn":24},{"ruleId":"282","severity":1,"message":"283","line":87,"column":22,"nodeType":"284","messageId":"285","endLine":87,"endColumn":24},{"ruleId":"282","severity":1,"message":"283","line":90,"column":25,"nodeType":"284","messageId":"285","endLine":90,"endColumn":27},{"ruleId":"282","severity":1,"message":"283","line":100,"column":35,"nodeType":"284","messageId":"285","endLine":100,"endColumn":37},{"ruleId":"282","severity":1,"message":"283","line":125,"column":36,"nodeType":"284","messageId":"285","endLine":125,"endColumn":38},{"ruleId":"282","severity":1,"message":"283","line":161,"column":39,"nodeType":"284","messageId":"285","endLine":161,"endColumn":41},{"ruleId":"282","severity":1,"message":"283","line":184,"column":40,"nodeType":"284","messageId":"285","endLine":184,"endColumn":42},{"ruleId":"282","severity":1,"message":"283","line":210,"column":60,"nodeType":"284","messageId":"285","endLine":210,"endColumn":62},{"ruleId":"274","replacedBy":"342"},{"ruleId":"276","replacedBy":"343"},{"ruleId":"278","severity":1,"message":"304","line":1,"column":27,"nodeType":"280","messageId":"281","endLine":1,"endColumn":35},{"ruleId":"278","severity":1,"message":"344","line":4,"column":8,"nodeType":"280","messageId":"281","endLine":4,"endColumn":16},{"ruleId":"278","severity":1,"message":"345","line":5,"column":8,"nodeType":"280","messageId":"281","endLine":5,"endColumn":16},{"ruleId":"278","severity":1,"message":"346","line":6,"column":8,"nodeType":"280","messageId":"281","endLine":6,"endColumn":22},{"ruleId":"278","severity":1,"message":"347","line":7,"column":8,"nodeType":"280","messageId":"281","endLine":7,"endColumn":24},{"ruleId":"278","severity":1,"message":"323","line":8,"column":10,"nodeType":"280","messageId":"281","endLine":8,"endColumn":19},{"ruleId":"278","severity":1,"message":"348","line":9,"column":8,"nodeType":"280","messageId":"281","endLine":9,"endColumn":21},{"ruleId":"278","severity":1,"message":"349","line":10,"column":8,"nodeType":"280","messageId":"281","endLine":10,"endColumn":19},{"ruleId":"278","severity":1,"message":"350","line":11,"column":8,"nodeType":"280","messageId":"281","endLine":11,"endColumn":22},{"ruleId":"278","severity":1,"message":"351","line":12,"column":8,"nodeType":"280","messageId":"281","endLine":12,"endColumn":19},{"ruleId":"278","severity":1,"message":"352","line":13,"column":8,"nodeType":"280","messageId":"281","endLine":13,"endColumn":22},{"ruleId":"278","severity":1,"message":"353","line":14,"column":8,"nodeType":"280","messageId":"281","endLine":14,"endColumn":24},{"ruleId":"278","severity":1,"message":"354","line":15,"column":8,"nodeType":"280","messageId":"281","endLine":15,"endColumn":22},{"ruleId":"295","severity":1,"message":"355","line":48,"column":7,"nodeType":"297","endLine":48,"endColumn":9,"suggestions":"356"},{"ruleId":"278","severity":1,"message":"357","line":1,"column":17,"nodeType":"280","messageId":"281","endLine":1,"endColumn":27},{"ruleId":"278","severity":1,"message":"358","line":1,"column":29,"nodeType":"280","messageId":"281","endLine":1,"endColumn":35},{"ruleId":"278","severity":1,"message":"327","line":1,"column":56,"nodeType":"280","messageId":"281","endLine":1,"endColumn":75},{"ruleId":"278","severity":1,"message":"344","line":4,"column":8,"nodeType":"280","messageId":"281","endLine":4,"endColumn":16},{"ruleId":"278","severity":1,"message":"345","line":5,"column":8,"nodeType":"280","messageId":"281","endLine":5,"endColumn":16},{"ruleId":"278","severity":1,"message":"346","line":6,"column":8,"nodeType":"280","messageId":"281","endLine":6,"endColumn":22},{"ruleId":"278","severity":1,"message":"347","line":7,"column":8,"nodeType":"280","messageId":"281","endLine":7,"endColumn":24},{"ruleId":"278","severity":1,"message":"323","line":8,"column":10,"nodeType":"280","messageId":"281","endLine":8,"endColumn":19},{"ruleId":"278","severity":1,"message":"348","line":9,"column":8,"nodeType":"280","messageId":"281","endLine":9,"endColumn":21},{"ruleId":"278","severity":1,"message":"349","line":10,"column":8,"nodeType":"280","messageId":"281","endLine":10,"endColumn":19},{"ruleId":"278","severity":1,"message":"351","line":12,"column":8,"nodeType":"280","messageId":"281","endLine":12,"endColumn":19},{"ruleId":"278","severity":1,"message":"352","line":13,"column":8,"nodeType":"280","messageId":"281","endLine":13,"endColumn":22},{"ruleId":"278","severity":1,"message":"353","line":14,"column":8,"nodeType":"280","messageId":"281","endLine":14,"endColumn":24},{"ruleId":"278","severity":1,"message":"354","line":15,"column":8,"nodeType":"280","messageId":"281","endLine":15,"endColumn":22},{"ruleId":"278","severity":1,"message":"359","line":22,"column":12,"nodeType":"280","messageId":"281","endLine":22,"endColumn":16},{"ruleId":"278","severity":1,"message":"360","line":22,"column":17,"nodeType":"280","messageId":"281","endLine":22,"endColumn":24},"no-native-reassign",["361"],"no-negated-in-lhs",["362"],"no-unused-vars","'MainLayout' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'cookies' is assigned a value but never used.","'removeCookies' is assigned a value but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'TeamCreate' is defined but never used.","'UserProfil' is defined but never used.","'Header' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUser'. Either include it or remove the dependency array.","ArrayExpression",["363"],"'setCookies' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useReducer' is defined but never used.","'useState' is defined but never used.","'Link' is defined but never used.","'Start' is defined but never used.","'About' is defined but never used.","'isValidElement' is defined but never used.","React Hook useEffect has a missing dependency: 'getTeam'. Either include it or remove the dependency array.",["364"],"'data' is assigned a value but never used.","'FlowCreate' is defined but never used.","'proba' is assigned a value but never used.","'setProba' is assigned a value but never used.","'update' is assigned a value but never used.","'setUpdate' is assigned a value but never used.","'flow' is assigned a value but never used.","'setFlow' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getFlowTree'. Either include it or remove the dependency array.",["365"],"React Hook useEffect has a missing dependency: 'updateFlowVersion'. Either include it or remove the dependency array.",["366"],"'useParams' is defined but never used.","React Hook useEffect has a missing dependency: 'props.id'. Either include it or remove the dependency array. If 'setDataset' needs the current value of 'props.id', you can also switch to useReducer instead of useState and read 'props.id' in the reducer.",["367"],"'SelectInput' is defined but never used.","'useImperativeHandle' is defined but never used.","'useCallback' is defined but never used.","'setIndex' is assigned a value but never used.","'fja' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.id'. Either include it or remove the dependency array. If 'setInput' needs the current value of 'props.id', you can also switch to useReducer instead of useState and read 'props.id' in the reducer.",["368"],"React Hook useEffect has missing dependencies: 'index' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["369"],"React Hook useEffect has missing dependencies: 'props.node.input_keys', 'props.node.output_keys', and 'props.node.params'. Either include them or remove the dependency array. If 'setIndex' needs the current value of 'props.node.params', you can also switch to useReducer instead of useState and read 'props.node.params' in the reducer.",["370"],["371"],["372"],["373"],["374"],["375"],["361"],["362"],"'TreeView' is defined but never used.","'TreeItem' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'ChevronRightIcon' is defined but never used.","'DatasetLoader' is defined but never used.","'ModelLoader' is defined but never used.","'DataNormalizer' is defined but never used.","'DataPlotter' is defined but never used.","'ModelEvaluator' is defined but never used.","'DataStandardizer' is defined but never used.","'ModelPredictor' is defined but never used.","React Hook useEffect has a missing dependency: 'file'. Either include it or remove the dependency array.",["376"],"'forwardRef' is defined but never used.","'useRef' is defined but never used.","'save' is assigned a value but never used.","'setSave' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"377","fix":"378"},{"desc":"379","fix":"380"},{"desc":"381","fix":"382"},{"desc":"383","fix":"384"},{"desc":"385","fix":"386"},{"desc":"385","fix":"387"},{"desc":"388","fix":"389"},{"desc":"390","fix":"391"},{"desc":"385","fix":"392"},{"desc":"388","fix":"393"},{"desc":"385","fix":"394"},{"desc":"388","fix":"395"},{"desc":"390","fix":"396"},{"desc":"397","fix":"398"},"Update the dependencies array to be: [getUser]",{"range":"399","text":"400"},"Update the dependencies array to be: [getTeam, teamid]",{"range":"401","text":"402"},"Update the dependencies array to be: [getFlowTree]",{"range":"403","text":"404"},"Update the dependencies array to be: [nodes, updateFlowVersion]",{"range":"405","text":"406"},"Update the dependencies array to be: [props.id, props.nodes]",{"range":"407","text":"408"},{"range":"409","text":"408"},"Update the dependencies array to be: [index, props]",{"range":"410","text":"411"},"Update the dependencies array to be: [props.node.input_keys, props.node.output_keys, props.node.params, props.nodes]",{"range":"412","text":"413"},{"range":"414","text":"408"},{"range":"415","text":"411"},{"range":"416","text":"408"},{"range":"417","text":"411"},{"range":"418","text":"413"},"Update the dependencies array to be: [file]",{"range":"419","text":"420"},[626,628],"[getUser]",[1163,1171],"[getTeam, teamid]",[1570,1572],"[getFlowTree]",[1638,1645],"[nodes, updateFlowVersion]",[933,946],"[props.id, props.nodes]",[1234,1247],[1544,1546],"[index, props]",[711,724],"[props.node.input_keys, props.node.output_keys, props.node.params, props.nodes]",[1122,1135],[1432,1434],[1126,1139],[1436,1438],[714,727],[1728,1730],"[file]"]